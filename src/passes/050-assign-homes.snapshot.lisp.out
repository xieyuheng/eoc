000 (program () (let ((y (let ((x 20)) (iadd x (let ((x 22)) x))))) y))
010 (program () (let ((y₁ (let ((x₁ 20)) (iadd x₁ (let ((x₂ 22)) x₂))))) y₁))
020 (program () (let ((y₁ (let ((x₁ 20)) (let ((x₂ 22)) (iadd x₁ x₂))))) y₁))
030 (c-program (:ctx (:x₁ int-t :x₂ int-t :y₁ int-t)) (:start ((= x₁ 20) (= x₂ 22) (= y₁ (iadd x₁ x₂)) (return y₁))))
040 (x86-program (:ctx (:x₁ int-t :x₂ int-t :y₁ int-t)) (:start (() ("movq $20, x₁" "movq $22, x₂" "movq x₁, y₁" "addq x₂, y₁" "movq y₁, %rax" "jmp epilog"))))
050 (x86-program (:ctx (:x₁ int-t :x₂ int-t :y₁ int-t)) (:start (() ("movq $20, -8(%rbp)" "movq $22, -16(%rbp)" "movq -8(%rbp), -24(%rbp)" "addq -16(%rbp), -24(%rbp)" "movq -24(%rbp), %rax" "jmp epilog"))))
000 (program () (let ((y (let ((x 20)) (let ((z 22)) (iadd x z))))) y))
010 (program () (let ((y₁ (let ((x₁ 20)) (let ((z₁ 22)) (iadd x₁ z₁))))) y₁))
020 (program () (let ((y₁ (let ((x₁ 20)) (let ((z₁ 22)) (iadd x₁ z₁))))) y₁))
030 (c-program (:ctx (:x₁ int-t :z₁ int-t :y₁ int-t)) (:start ((= x₁ 20) (= z₁ 22) (= y₁ (iadd x₁ z₁)) (return y₁))))
040 (x86-program (:ctx (:x₁ int-t :z₁ int-t :y₁ int-t)) (:start (() ("movq $20, x₁" "movq $22, z₁" "movq x₁, y₁" "addq z₁, y₁" "movq y₁, %rax" "jmp epilog"))))
050 (x86-program (:ctx (:x₁ int-t :z₁ int-t :y₁ int-t)) (:start (() ("movq $20, -8(%rbp)" "movq $22, -16(%rbp)" "movq -8(%rbp), -24(%rbp)" "addq -16(%rbp), -24(%rbp)" "movq -24(%rbp), %rax" "jmp epilog"))))
000 (program () (let ((z (let ((y (let ((x 6)) x))) y))) z))
010 (program () (let ((z₁ (let ((y₁ (let ((x₁ 6)) x₁))) y₁))) z₁))
020 (program () (let ((z₁ (let ((y₁ (let ((x₁ 6)) x₁))) y₁))) z₁))
030 (c-program (:ctx (:x₁ int-t :y₁ int-t :z₁ int-t)) (:start ((= x₁ 6) (= y₁ x₁) (= z₁ y₁) (return z₁))))
040 (x86-program (:ctx (:x₁ int-t :y₁ int-t :z₁ int-t)) (:start (() ("movq $6, x₁" "movq x₁, y₁" "movq y₁, z₁" "movq z₁, %rax" "jmp epilog"))))
050 (x86-program (:ctx (:x₁ int-t :y₁ int-t :z₁ int-t)) (:start (() ("movq $6, -8(%rbp)" "movq -8(%rbp), -16(%rbp)" "movq -16(%rbp), -24(%rbp)" "movq -24(%rbp), %rax" "jmp epilog"))))
000 (program () (let ((a 42)) (let ((b a)) b)))
010 (program () (let ((a₁ 42)) (let ((b₁ a₁)) b₁)))
020 (program () (let ((a₁ 42)) (let ((b₁ a₁)) b₁)))
030 (c-program (:ctx (:a₁ int-t :b₁ int-t)) (:start ((= a₁ 42) (= b₁ a₁) (return b₁))))
040 (x86-program (:ctx (:a₁ int-t :b₁ int-t)) (:start (() ("movq $42, a₁" "movq a₁, b₁" "movq b₁, %rax" "jmp epilog"))))
050 (x86-program (:ctx (:a₁ int-t :b₁ int-t)) (:start (() ("movq $42, -8(%rbp)" "movq -8(%rbp), -16(%rbp)" "movq -16(%rbp), %rax" "jmp epilog"))))
000 (program () (ineg (random-dice)))
010 (program () (ineg (random-dice)))
020 (program () (let ((_₁ (random-dice))) (ineg _₁)))
030 (c-program (:ctx (:_₁ int-t)) (:start ((= _₁ (random-dice)) (return (ineg _₁)))))
040 (x86-program (:ctx (:_₁ int-t)) (:start (() ("callq random_dice, 0" "movq %rax, _₁" "movq _₁, %rax" "negq %rax" "jmp epilog"))))
050 (x86-program (:ctx (:_₁ int-t)) (:start (() ("callq random_dice, 0" "movq %rax, -8(%rbp)" "movq -8(%rbp), %rax" "negq %rax" "jmp epilog"))))
000 (program () (iadd (random-dice) (random-dice)))
010 (program () (iadd (random-dice) (random-dice)))
020 (program () (let ((_₂ (random-dice))) (let ((_₁ (random-dice))) (iadd _₁ _₂))))
030 (c-program (:ctx (:_₂ int-t :_₁ int-t)) (:start ((= _₂ (random-dice)) (= _₁ (random-dice)) (return (iadd _₁ _₂)))))
040 (x86-program (:ctx (:_₂ int-t :_₁ int-t)) (:start (() ("callq random_dice, 0" "movq %rax, _₂" "callq random_dice, 0" "movq %rax, _₁" "movq _₁, %rax" "addq _₂, %rax" "jmp epilog"))))
050 (x86-program (:ctx (:_₂ int-t :_₁ int-t)) (:start (() ("callq random_dice, 0" "movq %rax, -8(%rbp)" "callq random_dice, 0" "movq %rax, -16(%rbp)" "movq -16(%rbp), %rax" "addq -8(%rbp), %rax" "jmp epilog"))))
