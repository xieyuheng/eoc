000 (program () 42)
010 (program () 42)
020 (program () 42)
030 (c-program () (:start ((return 42))))
000 (program () (+ 20 22))
010 (program () (+ 20 22))
020 (program () (+ 20 22))
030 (c-program () (:start ((return (+ 20 22)))))
000 (program () (+ 20 (+ 11 11)))
010 (program () (+ 20 (+ 11 11)))
020 (program () (let ((_₁ (+ 11 11))) (+ 20 _₁)))
030 (c-program () (:start ((= _₁ (+ 11 11)) (return (+ 20 _₁)))))
000 (program () (let ((y (let ((x 20)) (+ x (let ((x 22)) x))))) y))
010 (program () (let ((y₁ (let ((x₁ 20)) (+ x₁ (let ((x₂ 22)) x₂))))) y₁))
020 (program () (let ((y₁ (let ((x₁ 20)) (let ((x₂ 22)) (+ x₁ x₂))))) y₁))
030 (c-program () (:start ((= x₁ 20) (= x₂ 22) (= y₁ (+ x₁ x₂)) (return y₁))))
000 (program () (let ((y (let ((x 20)) (let ((z 22)) (+ x z))))) y))
010 (program () (let ((y₁ (let ((x₁ 20)) (let ((z₁ 22)) (+ x₁ z₁))))) y₁))
020 (program () (let ((y₁ (let ((x₁ 20)) (let ((z₁ 22)) (+ x₁ z₁))))) y₁))
030 (c-program () (:start ((= x₁ 20) (= z₁ 22) (= y₁ (+ x₁ z₁)) (return y₁))))
000 (program () (let ((z (let ((y (let ((x 6)) x))) y))) z))
010 (program () (let ((z₁ (let ((y₁ (let ((x₁ 6)) x₁))) y₁))) z₁))
020 (program () (let ((z₁ (let ((y₁ (let ((x₁ 6)) x₁))) y₁))) z₁))
030 (c-program () (:start ((= x₁ 6) (= y₁ x₁) (= z₁ y₁) (return z₁))))
