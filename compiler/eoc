#!/usr/bin/env -S npx @xieyuheng/x-lisp.js run --debug=true

(import-all "src/index.lisp")

(match (current-command-line-args)
  (['compile input :output output]
   (= input-file (symbol-to-string input))
   (= x86-program (compile-program (load-program input-file)))
   (= output-file (if (null? output)
                    (string-append input-file ".exe")
                    (symbol-to-string output)))
   (generate-exe x86-program output-file))

  (['compile-assembly input]
   (= input-file (symbol-to-string input))
   (= x86-program (compile-program (load-program input-file)))
   (write (format-x86-program x86-program)))

  (['compile-passes input]
   (= input-file (symbol-to-string input))
   (compile-passes (load-program input-file)))

  (['help]
   (print-help))

  (_
   (print-help)))

(define runtime-file
  (path-join [(current-module-directory) "../runtime/runtime.o"]))

(define tmp-directory "/tmp/eoc")

(define (generate-exe x86-program output-file)
  (= output-id (string-replace "/" "-" output-file))
  (= asm-id (string-append-many
             [output-id "." (format-sexp (random-int 0 10000)) ".s"]))
  (= asm-file (path-join [tmp-directory asm-id]))
  (directory-create-recursively (file-directory asm-file))
  (file-save asm-file (format-x86-program x86-program))
  (system-shell-run "cc" [asm-file runtime-file "-o" output-file])
  (file-remove asm-file))

(define (load-program file)
  (parse-program
   `(program
     ()
     ,(parse-sexp (file-load file)))))

(define (print-help)
  (writeln "commands:")
  (writeln "  compile-assembly <file> -- compile a file to assembly")
  (writeln "  compile-passes <file> -- output all compiler passes for snapshot testing")
  (writeln "  help -- display help information")
  (writeln "")
  (writeln "default command: help"))
