mod:

  (mod () (let ((x (begin (print-int 1) (newline) (print-int 2) (newline) (print-int 3) (newline) 6))) (iadd x x)))

shrink:

  (mod () (let ((x (begin (print-int 1) (newline) (print-int 2) (newline) (print-int 3) (newline) 6))) (iadd x x)))

uniquify:

  (mod () (let ((x₁ (begin (print-int 1) (newline) (print-int 2) (newline) (print-int 3) (newline) 6))) (iadd x₁ x₁)))

check-type:

  (mod () (the int-t (let ((x₁ (the int-t (begin (the void-t (print-int (the int-t 1))) (the void-t (newline)) (the void-t (print-int (the int-t 2))) (the void-t (newline)) (the void-t (print-int (the int-t 3))) (the void-t (newline)) (the int-t 6))))) (the int-t (iadd (the int-t x₁) (the int-t x₁))))))

remove-complex-operands:

  (mod () (the int-t (let ((x₁ (the int-t (begin (the void-t (print-int (the int-t 1))) (the void-t (newline)) (the void-t (print-int (the int-t 2))) (the void-t (newline)) (the void-t (print-int (the int-t 3))) (the void-t (newline)) (the int-t 6))))) (the int-t (iadd (the int-t x₁) (the int-t x₁))))))

explicate-control:

  [#cons-c-mod
   []
   [:begin
    [#cons-seq
     [#effect-stmt [#prim-c-exp 'print-int [[#int-c-exp 1]]]]
     [#cons-seq
      [#effect-stmt [#prim-c-exp 'newline []]]
      [#cons-seq
       [#effect-stmt [#prim-c-exp 'print-int [[#int-c-exp 2]]]]
       [#cons-seq
        [#effect-stmt [#prim-c-exp 'newline []]]
        [#cons-seq
         [#effect-stmt [#prim-c-exp 'print-int [[#int-c-exp 3]]]]
         [#cons-seq
          [#effect-stmt [#prim-c-exp 'newline []]]
          [#cons-seq
           [#assign-stmt [#var-c-exp 'x₁] #int-type [#int-c-exp 6]]
           [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'x₁] [#var-c-exp 'x₁]]]]]]]]]]]]]

uncover-locals:

  [#cons-c-mod
   [:locals [:x₁ #int-type]]
   [:begin
    [#cons-seq
     [#effect-stmt [#prim-c-exp 'print-int [[#int-c-exp 1]]]]
     [#cons-seq
      [#effect-stmt [#prim-c-exp 'newline []]]
      [#cons-seq
       [#effect-stmt [#prim-c-exp 'print-int [[#int-c-exp 2]]]]
       [#cons-seq
        [#effect-stmt [#prim-c-exp 'newline []]]
        [#cons-seq
         [#effect-stmt [#prim-c-exp 'print-int [[#int-c-exp 3]]]]
         [#cons-seq
          [#effect-stmt [#prim-c-exp 'newline []]]
          [#cons-seq
           [#assign-stmt [#var-c-exp 'x₁] #int-type [#int-c-exp 6]]
           [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'x₁] [#var-c-exp 'x₁]]]]]]]]]]]]]

select-instructions:

  [#cons-x86-mod
   [:locals [:x₁ #int-type]]
   [:begin
    [#cons-block
     []
     [['movq [[#imm-rand 1] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 2] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 3] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 6] [#var-rand 'x₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-mod
   [:locals [:x₁ #int-type]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 2] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 3] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 6] [#var-rand 'x₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-mod
   [:locals [:x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#reg-rand 'rdi]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]
      [#reg-rand 'rcx]
      [#reg-rand 'rdx]
      [#reg-rand 'rsi]
      [#reg-rand 'r8]
      [#reg-rand 'r9]
      [#reg-rand 'r10]
      [#reg-rand 'r11]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rdi] {[#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp]
       {[#reg-rand 'rdi]
        [#reg-rand 'rax]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]
        [#var-rand 'x₁]}
       [#reg-rand 'rax]
       {[#reg-rand 'rsp]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]}
       [#reg-rand 'rcx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rsi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r8] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r9] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r10] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r11] {[#reg-rand 'rax] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 2] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 3] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 6] [#var-rand 'x₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-mod
   [:home-locations (@hash [#var-rand 'x₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :locals [:x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#reg-rand 'rdi]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]
      [#reg-rand 'rcx]
      [#reg-rand 'rdx]
      [#reg-rand 'rsi]
      [#reg-rand 'r8]
      [#reg-rand 'r9]
      [#reg-rand 'r10]
      [#reg-rand 'r11]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rdi] {[#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp]
       {[#reg-rand 'rdi]
        [#reg-rand 'rax]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]
        [#var-rand 'x₁]}
       [#reg-rand 'rax]
       {[#reg-rand 'rsp]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]}
       [#reg-rand 'rcx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rsi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r8] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r9] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r10] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r11] {[#reg-rand 'rax] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 2] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 3] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 6] [#var-rand 'x₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

assign-homes:

  [#cons-x86-mod
   [:home-locations (@hash [#var-rand 'x₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :locals [:x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#reg-rand 'rdi]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]
      [#reg-rand 'rcx]
      [#reg-rand 'rdx]
      [#reg-rand 'rsi]
      [#reg-rand 'r8]
      [#reg-rand 'r9]
      [#reg-rand 'r10]
      [#reg-rand 'r11]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rdi] {[#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp]
       {[#reg-rand 'rdi]
        [#reg-rand 'rax]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]
        [#var-rand 'x₁]}
       [#reg-rand 'rax]
       {[#reg-rand 'rsp]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]}
       [#reg-rand 'rcx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rsi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r8] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r9] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r10] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r11] {[#reg-rand 'rax] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 2] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 3] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      [#callq 'newline 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rax]]]
      ['movq [[#imm-rand 6] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-mod
   [:home-locations (@hash [#var-rand 'x₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :locals [:x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#reg-rand 'rdi]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]
      [#reg-rand 'rcx]
      [#reg-rand 'rdx]
      [#reg-rand 'rsi]
      [#reg-rand 'r8]
      [#reg-rand 'r9]
      [#reg-rand 'r10]
      [#reg-rand 'r11]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rdi] {[#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp]
       {[#reg-rand 'rdi]
        [#reg-rand 'rax]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]
        [#var-rand 'x₁]}
       [#reg-rand 'rax]
       {[#reg-rand 'rsp]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]}
       [#reg-rand 'rcx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rsi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r8] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r9] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r10] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r11] {[#reg-rand 'rax] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      [#callq 'newline 0]
      ['movq [[#imm-rand 2] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      [#callq 'newline 0]
      ['movq [[#imm-rand 3] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      [#callq 'newline 0]
      ['movq [[#imm-rand 6] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-mod
   [:home-locations (@hash [#var-rand 'x₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :locals [:x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#reg-rand 'rdi]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]
      [#reg-rand 'rcx]
      [#reg-rand 'rdx]
      [#reg-rand 'rsi]
      [#reg-rand 'r8]
      [#reg-rand 'r9]
      [#reg-rand 'r10]
      [#reg-rand 'r11]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rdi] {[#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp]
       {[#reg-rand 'rdi]
        [#reg-rand 'rax]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]
        [#var-rand 'x₁]}
       [#reg-rand 'rax]
       {[#reg-rand 'rsp]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]}
       [#reg-rand 'rcx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rsi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r8] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r9] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r10] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r11] {[#reg-rand 'rax] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     []
     [['pushq [[#reg-rand 'rbp]]]
      ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]]
      [#jmp 'begin.body]]]
    :begin.body
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rdi] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      [#callq 'newline 0]
      ['movq [[#imm-rand 2] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      [#callq 'newline 0]
      ['movq [[#imm-rand 3] [#reg-rand 'rdi]]]
      [#callq 'print_int 1]
      [#callq 'newline 0]
      ['movq [[#imm-rand 6] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]
    :begin.epilog [#cons-block [] [['popq [[#reg-rand 'rbp]]] #retq]]]]

