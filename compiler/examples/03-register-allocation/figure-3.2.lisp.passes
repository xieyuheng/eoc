000 (program () (let ((x (random-dice))) (let ((y (random-dice))) (iadd (iadd x y) 42))))
010 (program () (let ((x₁ (random-dice))) (let ((y₁ (random-dice))) (iadd (iadd x₁ y₁) 42))))
020 (program () (let ((x₁ (random-dice))) (let ((y₁ (random-dice))) (let ((_₁ (iadd x₁ y₁))) (iadd _₁ 42)))))
030 (c-program (:ctx (:x₁ int-t :y₁ int-t :_₁ int-t)) (:start ((= x₁ (random-dice)) (= y₁ (random-dice)) (= _₁ (iadd x₁ y₁)) (return (iadd _₁ 42)))))
040 (x86-program (:ctx (:x₁ int-t :y₁ int-t :_₁ int-t)) (:start (() ((callq random_dice 0) (movq %rax x₁) (callq random_dice 0) (movq %rax y₁) (movq x₁ _₁) (addq y₁ _₁) (movq _₁ %rax) (addq $42 %rax) (jmp epilog)))))
050 (x86-program (:ctx (:x₁ int-t :y₁ int-t :_₁ int-t)) (:start (() ((callq random_dice 0) (movq %rax (deref %rbp -8)) (callq random_dice 0) (movq %rax (deref %rbp -16)) (movq (deref %rbp -8) (deref %rbp -24)) (addq (deref %rbp -16) (deref %rbp -24)) (movq (deref %rbp -24) %rax) (addq $42 %rax) (jmp epilog)))))
060 (x86-program (:ctx (:x₁ int-t :y₁ int-t :_₁ int-t)) (:start (() ((callq random_dice 0) (movq %rax (deref %rbp -8)) (callq random_dice 0) (movq %rax (deref %rbp -16)) (movq (deref %rbp -8) %rax) (movq %rax (deref %rbp -24)) (movq (deref %rbp -16) %rax) (addq %rax (deref %rbp -24)) (movq (deref %rbp -24) %rax) (addq $42 %rax) (jmp epilog)))))
070 (x86-program (:ctx (:x₁ int-t :y₁ int-t :_₁ int-t)) (:start (() ((callq random_dice 0) (movq %rax (deref %rbp -8)) (callq random_dice 0) (movq %rax (deref %rbp -16)) (movq (deref %rbp -8) %rax) (movq %rax (deref %rbp -24)) (movq (deref %rbp -16) %rax) (addq %rax (deref %rbp -24)) (movq (deref %rbp -24) %rax) (addq $42 %rax) (jmp epilog))) :begin (() ((pushq %rbp) (movq %rsp %rbp) (subq $16 %rsp) (jmp start))) :epilog (() ((addq $16 %rsp) (popq %rbp) (retq)))))
