000 (program () (let ((v 1)) (let ((w 42)) (let ((x (iadd v 7))) (let ((y x)) (let ((z (iadd x w))) (iadd z (ineg y))))))))
010 (program () (let ((v₁ 1)) (let ((w₁ 42)) (let ((x₁ (iadd v₁ 7))) (let ((y₁ x₁)) (let ((z₁ (iadd x₁ w₁))) (iadd z₁ (ineg y₁))))))))
020 (program () (let ((v₁ 1)) (let ((w₁ 42)) (let ((x₁ (iadd v₁ 7))) (let ((y₁ x₁)) (let ((z₁ (iadd x₁ w₁))) (let ((_₁ (ineg y₁))) (iadd z₁ _₁))))))))
030 (c-program (:ctx (:v₁ int-t :w₁ int-t :x₁ int-t :y₁ int-t :z₁ int-t :_₁ int-t)) (:start ((= v₁ 1) (= w₁ 42) (= x₁ (iadd v₁ 7)) (= y₁ x₁) (= z₁ (iadd x₁ w₁)) (= _₁ (ineg y₁)) (return (iadd z₁ _₁)))))
040 (x86-program (:ctx (:v₁ int-t :w₁ int-t :x₁ int-t :y₁ int-t :z₁ int-t :_₁ int-t)) (:start (() ((movq $1 v₁) (movq $42 w₁) (movq v₁ x₁) (addq $7 x₁) (movq x₁ y₁) (movq x₁ z₁) (addq w₁ z₁) (movq y₁ _₁) (negq _₁) (movq z₁ %rax) (addq _₁ %rax) (jmp epilog)))))
050 (x86-program (:ctx (:v₁ int-t :w₁ int-t :x₁ int-t :y₁ int-t :z₁ int-t :_₁ int-t)) (:start (() ((movq $1 v₁) (movq $42 w₁) (movq v₁ x₁) (addq $7 x₁) (movq x₁ y₁) (movq x₁ z₁) (addq w₁ z₁) (movq y₁ _₁) (negq _₁) (movq z₁ %rax) (addq _₁ %rax) (jmp epilog)))))
060 (x86-program (:ctx (:v₁ int-t :w₁ int-t :x₁ int-t :y₁ int-t :z₁ int-t :_₁ int-t)) (:start (() ((movq $1 (deref %rbp -8)) (movq $42 (deref %rbp -16)) (movq (deref %rbp -8) (deref %rbp -24)) (addq $7 (deref %rbp -24)) (movq (deref %rbp -24) (deref %rbp -32)) (movq (deref %rbp -24) (deref %rbp -40)) (addq (deref %rbp -16) (deref %rbp -40)) (movq (deref %rbp -32) (deref %rbp -48)) (negq (deref %rbp -48)) (movq (deref %rbp -40) %rax) (addq (deref %rbp -48) %rax) (jmp epilog)))))
070 (x86-program (:ctx (:v₁ int-t :w₁ int-t :x₁ int-t :y₁ int-t :z₁ int-t :_₁ int-t)) (:start (() ((movq $1 (deref %rbp -8)) (movq $42 (deref %rbp -16)) (movq (deref %rbp -8) %rax) (movq %rax (deref %rbp -24)) (addq $7 (deref %rbp -24)) (movq (deref %rbp -24) %rax) (movq %rax (deref %rbp -32)) (movq (deref %rbp -24) %rax) (movq %rax (deref %rbp -40)) (movq (deref %rbp -16) %rax) (addq %rax (deref %rbp -40)) (movq (deref %rbp -32) %rax) (movq %rax (deref %rbp -48)) (negq (deref %rbp -48)) (movq (deref %rbp -40) %rax) (addq (deref %rbp -48) %rax) (jmp epilog)))))
080 (x86-program (:ctx (:v₁ int-t :w₁ int-t :x₁ int-t :y₁ int-t :z₁ int-t :_₁ int-t)) (:start (() ((movq $1 (deref %rbp -8)) (movq $42 (deref %rbp -16)) (movq (deref %rbp -8) %rax) (movq %rax (deref %rbp -24)) (addq $7 (deref %rbp -24)) (movq (deref %rbp -24) %rax) (movq %rax (deref %rbp -32)) (movq (deref %rbp -24) %rax) (movq %rax (deref %rbp -40)) (movq (deref %rbp -16) %rax) (addq %rax (deref %rbp -40)) (movq (deref %rbp -32) %rax) (movq %rax (deref %rbp -48)) (negq (deref %rbp -48)) (movq (deref %rbp -40) %rax) (addq (deref %rbp -48) %rax) (jmp epilog))) :begin (() ((pushq %rbp) (movq %rsp %rbp) (subq $16 %rsp) (jmp start))) :epilog (() ((addq $16 %rsp) (popq %rbp) (retq)))))
