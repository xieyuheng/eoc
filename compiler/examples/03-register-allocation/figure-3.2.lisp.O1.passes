000 (program () (let ((x (random-dice))) (let ((y (random-dice))) (iadd (iadd x y) 42))))
001 (program () (iadd 42 (iadd (random-dice) (random-dice))))
010 (program () (iadd 42 (iadd (random-dice) (random-dice))))
020 (program () (let ((_₂ (random-dice))) (let ((_₁ (random-dice))) (let ((_₃ (iadd _₁ _₂))) (iadd 42 _₃)))))
030 (c-program (:ctx (:_₂ int-t :_₁ int-t :_₃ int-t)) (:start ((= _₂ (random-dice)) (= _₁ (random-dice)) (= _₃ (iadd _₁ _₂)) (return (iadd 42 _₃)))))
040 (x86-program (:ctx (:_₂ int-t :_₁ int-t :_₃ int-t)) (:start (() ((callq random_dice 0) (movq %rax _₂) (callq random_dice 0) (movq %rax _₁) (movq _₁ _₃) (addq _₂ _₃) (movq $42 %rax) (addq _₃ %rax) (jmp epilog)))))
050 (x86-program (:ctx (:_₂ int-t :_₁ int-t :_₃ int-t)) (:start (() ((callq random_dice 0) (movq %rax (deref %rbp -8)) (callq random_dice 0) (movq %rax (deref %rbp -16)) (movq (deref %rbp -16) (deref %rbp -24)) (addq (deref %rbp -8) (deref %rbp -24)) (movq $42 %rax) (addq (deref %rbp -24) %rax) (jmp epilog)))))
060 (x86-program (:ctx (:_₂ int-t :_₁ int-t :_₃ int-t)) (:start (() ((callq random_dice 0) (movq %rax (deref %rbp -8)) (callq random_dice 0) (movq %rax (deref %rbp -16)) (movq (deref %rbp -16) %rax) (movq %rax (deref %rbp -24)) (movq (deref %rbp -8) %rax) (addq %rax (deref %rbp -24)) (movq $42 %rax) (addq (deref %rbp -24) %rax) (jmp epilog)))))
070 (x86-program (:ctx (:_₂ int-t :_₁ int-t :_₃ int-t)) (:start (() ((callq random_dice 0) (movq %rax (deref %rbp -8)) (callq random_dice 0) (movq %rax (deref %rbp -16)) (movq (deref %rbp -16) %rax) (movq %rax (deref %rbp -24)) (movq (deref %rbp -8) %rax) (addq %rax (deref %rbp -24)) (movq $42 %rax) (addq (deref %rbp -24) %rax) (jmp epilog))) :begin (() ((pushq %rbp) (movq %rsp %rbp) (subq $16 %rsp) (jmp start))) :epilog (() ((addq $16 %rsp) (popq %rbp) (retq)))))
