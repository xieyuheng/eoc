program:

  (program () (let ((x 1)) (iadd x (let ((x (let ((y 5)) (iadd y x)))) (iadd x 100)))))

uniquify:

  (program () (let ((x₁ 1)) (iadd x₁ (let ((x₂ (let ((y₁ 5)) (iadd y₁ x₁)))) (iadd x₂ 100)))))

remove-complex-operands:

  (program () (let ((x₁ 1)) (let ((x₂ (let ((y₁ 5)) (iadd y₁ x₁)))) (let ((_₁ (iadd x₂ 100))) (iadd x₁ _₁)))))

explicate-control:

  (c-program () (:begin ((= x₁ 1) (= y₁ 5) (= x₂ (iadd y₁ x₁)) (= _₁ (iadd x₂ 100)) (return (iadd x₁ _₁)))))

select-instructions:

  [#cons-x86-program [:contexts [:begin [:x₁ #int-t :y₁ #int-t :x₂ #int-t :_₁ #int-t]]] [:begin [#cons-block [:context [:x₁ #int-t :y₁ #int-t :x₂ #int-t :_₁ #int-t]] [['movq [[#imm-rand 1] [#var-rand 'x₁]]] ['movq [[#imm-rand 5] [#var-rand 'y₁]]] ['movq [[#var-rand 'y₁] [#var-rand 'x₂]]] ['addq [[#var-rand 'x₁] [#var-rand 'x₂]]] ['movq [[#var-rand 'x₂] [#var-rand '_₁]]] ['addq [[#imm-rand 100] [#var-rand '_₁]]] ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]] ['addq [[#var-rand '_₁] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-program [:contexts [:begin [:x₁ #int-t :y₁ #int-t :x₂ #int-t :_₁ #int-t]]] [:begin [#cons-block [:context [:x₁ #int-t :y₁ #int-t :x₂ #int-t :_₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'y₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#var-rand 'x₂] [#reg-rand 'rsp]} {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]}] [['movq [[#imm-rand 1] [#var-rand 'x₁]]] ['movq [[#imm-rand 5] [#var-rand 'y₁]]] ['movq [[#var-rand 'y₁] [#var-rand 'x₂]]] ['addq [[#var-rand 'x₁] [#var-rand 'x₂]]] ['movq [[#var-rand 'x₂] [#var-rand '_₁]]] ['addq [[#imm-rand 100] [#var-rand '_₁]]] ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]] ['addq [[#var-rand '_₁] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-program [:contexts [:begin [:x₁ #int-t :y₁ #int-t :x₂ #int-t :_₁ #int-t]]] [:begin [#cons-block [:context [:x₁ #int-t :y₁ #int-t :x₂ #int-t :_₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'y₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#var-rand 'x₂] [#reg-rand 'rsp]} {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'x₁] [#reg-rand 'rsp] [#var-rand 'y₁] [#var-rand 'x₂] [#var-rand '_₁] [#reg-rand 'rax]} (@hash [#var-rand 'x₁] {[#reg-rand 'rsp] [#var-rand 'y₁] [#var-rand 'x₂] [#var-rand '_₁]} [#reg-rand 'rsp] {[#var-rand 'x₁] [#var-rand 'y₁] [#var-rand 'x₂] [#var-rand '_₁] [#reg-rand 'rax]} [#var-rand 'y₁] {[#var-rand 'x₁] [#reg-rand 'rsp]} [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]} [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]] [['movq [[#imm-rand 1] [#var-rand 'x₁]]] ['movq [[#imm-rand 5] [#var-rand 'y₁]]] ['movq [[#var-rand 'y₁] [#var-rand 'x₂]]] ['addq [[#var-rand 'x₁] [#var-rand 'x₂]]] ['movq [[#var-rand 'x₂] [#var-rand '_₁]]] ['addq [[#imm-rand 100] [#var-rand '_₁]]] ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]] ['addq [[#var-rand '_₁] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-program [:contexts [:begin [:x₁ #int-t :y₁ #int-t :x₂ #int-t :_₁ #int-t]]] [:begin [#cons-block [:context [:x₁ #int-t :y₁ #int-t :x₂ #int-t :_₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'y₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#var-rand 'x₂] [#reg-rand 'rsp]} {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'x₁] [#reg-rand 'rsp] [#var-rand 'y₁] [#var-rand 'x₂] [#var-rand '_₁] [#reg-rand 'rax]} (@hash [#var-rand 'x₁] {[#reg-rand 'rsp] [#var-rand 'y₁] [#var-rand 'x₂] [#var-rand '_₁]} [#reg-rand 'rsp] {[#var-rand 'x₁] [#var-rand 'y₁] [#var-rand 'x₂] [#var-rand '_₁] [#reg-rand 'rax]} [#var-rand 'y₁] {[#var-rand 'x₁] [#reg-rand 'rsp]} [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]} [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})] :spilled-variable-count 0 :used-callee-saved-registers []] [['movq [[#imm-rand 1] [#reg-rand 'rdx]]] ['movq [[#imm-rand 5] [#reg-rand 'rcx]]] ['movq [[#reg-rand 'rcx] [#reg-rand 'rcx]]] ['addq [[#reg-rand 'rdx] [#reg-rand 'rcx]]] ['movq [[#reg-rand 'rcx] [#reg-rand 'rcx]]] ['addq [[#imm-rand 100] [#reg-rand 'rcx]]] ['movq [[#reg-rand 'rdx] [#reg-rand 'rax]]] ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-program [:contexts [:begin [:x₁ #int-t :y₁ #int-t :x₂ #int-t :_₁ #int-t]]] [:begin [#cons-block [:context [:x₁ #int-t :y₁ #int-t :x₂ #int-t :_₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'y₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#var-rand 'x₂] [#reg-rand 'rsp]} {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'x₁] [#reg-rand 'rsp] [#var-rand 'y₁] [#var-rand 'x₂] [#var-rand '_₁] [#reg-rand 'rax]} (@hash [#var-rand 'x₁] {[#reg-rand 'rsp] [#var-rand 'y₁] [#var-rand 'x₂] [#var-rand '_₁]} [#reg-rand 'rsp] {[#var-rand 'x₁] [#var-rand 'y₁] [#var-rand 'x₂] [#var-rand '_₁] [#reg-rand 'rax]} [#var-rand 'y₁] {[#var-rand 'x₁] [#reg-rand 'rsp]} [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]} [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})] :spilled-variable-count 0 :used-callee-saved-registers []] [['movq [[#imm-rand 1] [#reg-rand 'rdx]]] ['movq [[#imm-rand 5] [#reg-rand 'rcx]]] ['addq [[#reg-rand 'rdx] [#reg-rand 'rcx]]] ['addq [[#imm-rand 100] [#reg-rand 'rcx]]] ['movq [[#reg-rand 'rdx] [#reg-rand 'rax]]] ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-program [:contexts [:begin [:x₁ #int-t :y₁ #int-t :x₂ #int-t :_₁ #int-t]]] [:begin [#cons-block [] [['pushq [[#reg-rand 'rbp]]] ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]] ['subq [[#imm-rand 16] [#reg-rand 'rsp]]] [#jmp 'begin.body]]] :begin.body [#cons-block [:context [:x₁ #int-t :y₁ #int-t :x₂ #int-t :_₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'y₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#var-rand 'x₂] [#reg-rand 'rsp]} {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'x₁] [#reg-rand 'rsp] [#var-rand 'y₁] [#var-rand 'x₂] [#var-rand '_₁] [#reg-rand 'rax]} (@hash [#var-rand 'x₁] {[#reg-rand 'rsp] [#var-rand 'y₁] [#var-rand 'x₂] [#var-rand '_₁]} [#reg-rand 'rsp] {[#var-rand 'x₁] [#var-rand 'y₁] [#var-rand 'x₂] [#var-rand '_₁] [#reg-rand 'rax]} [#var-rand 'y₁] {[#var-rand 'x₁] [#reg-rand 'rsp]} [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]} [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})] :spilled-variable-count 0 :used-callee-saved-registers []] [['movq [[#imm-rand 1] [#reg-rand 'rdx]]] ['movq [[#imm-rand 5] [#reg-rand 'rcx]]] ['addq [[#reg-rand 'rdx] [#reg-rand 'rcx]]] ['addq [[#imm-rand 100] [#reg-rand 'rcx]]] ['movq [[#reg-rand 'rdx] [#reg-rand 'rax]]] ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]] :begin.epilog [#cons-block [] [['addq [[#imm-rand 16] [#reg-rand 'rsp]]] ['popq [[#reg-rand 'rbp]]] #retq]]]]

