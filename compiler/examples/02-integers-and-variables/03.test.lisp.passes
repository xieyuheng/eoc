000 (program () (let ((y (let ((x 20)) (let ((z 22)) (iadd x z))))) y))
010 (program () (let ((y₁ (let ((x₁ 20)) (let ((z₁ 22)) (iadd x₁ z₁))))) y₁))
020 (program () (let ((y₁ (let ((x₁ 20)) (let ((z₁ 22)) (iadd x₁ z₁))))) y₁))
030 (c-program (:ctx (:x₁ int-t :z₁ int-t :y₁ int-t)) (:start ((= x₁ 20) (= z₁ 22) (= y₁ (iadd x₁ z₁)) (return y₁))))
040 (x86-program (:ctx (:x₁ int-t :z₁ int-t :y₁ int-t)) (:start (() ("movq $20, x₁" "movq $22, z₁" "movq x₁, y₁" "addq z₁, y₁" "movq y₁, %rax" "jmp epilog"))))
050 (x86-program (:ctx (:x₁ int-t :z₁ int-t :y₁ int-t)) (:start (() ("movq $20, -8(%rbp)" "movq $22, -16(%rbp)" "movq -8(%rbp), -24(%rbp)" "addq -16(%rbp), -24(%rbp)" "movq -24(%rbp), %rax" "jmp epilog"))))
060 (x86-program (:ctx (:x₁ int-t :z₁ int-t :y₁ int-t)) (:start (() ("movq $20, -8(%rbp)" "movq $22, -16(%rbp)" "movq -8(%rbp), %rax" "movq %rax, -24(%rbp)" "movq -16(%rbp), %rax" "addq %rax, -24(%rbp)" "movq -24(%rbp), %rax" "jmp epilog"))))
070 (x86-program (:ctx (:x₁ int-t :z₁ int-t :y₁ int-t)) (:start (() ("movq $20, -8(%rbp)" "movq $22, -16(%rbp)" "movq -8(%rbp), %rax" "movq %rax, -24(%rbp)" "movq -16(%rbp), %rax" "addq %rax, -24(%rbp)" "movq -24(%rbp), %rax" "jmp epilog")) :main (() ("pushq %rbp" "movq %rsp, %rbp" "subq $16, %rsp" "jmp start")) :epilog (() ("addq $16, %rsp" "popq %rbp" "retq"))))
