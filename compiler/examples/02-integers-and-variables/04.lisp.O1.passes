000 (program () (let ((z (let ((y (let ((x 6)) x))) y))) z))
001 (program () 6)
010 (program () 6)
020 (program () 6)
030 (c-program (:ctx ()) (:start ((return 6))))
040 (cons-x86-program [:ctx []] [:start (cons-block [] [['movq [(imm-rand 6) (reg-rand 'rax)]] (jmp 'epilog)])])
050 (cons-x86-program [:ctx []] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 6) (reg-rand 'rax)]] (jmp 'epilog)])])
060 (cons-x86-program [:ctx [] :stack-space 0] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 6) (reg-rand 'rax)]] (jmp 'epilog)])])
070 (cons-x86-program [:ctx [] :stack-space 0] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 6) (reg-rand 'rax)]] (jmp 'epilog)])])
080 (cons-x86-program [:ctx [] :stack-space 0] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 6) (reg-rand 'rax)]] (jmp 'epilog)]) :begin (cons-block [] [['pushq [(reg-rand 'rbp)]] ['movq [(reg-rand 'rsp) (reg-rand 'rbp)]] ['subq [(imm-rand 16) (reg-rand 'rsp)]] (jmp 'start)]) :epilog (cons-block [] [['addq [(imm-rand 16) (reg-rand 'rsp)]] ['popq [(reg-rand 'rbp)]] retq])])
