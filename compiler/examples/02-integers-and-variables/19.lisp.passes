program:

  (program () (let ((x 1)) (iadd x (let ((x (let ((x 5)) (iadd x x)))) (iadd x 100)))))

uniquify:

  (program () (let ((x₁ 1)) (iadd x₁ (let ((x₂ (let ((x₃ 5)) (iadd x₃ x₃)))) (iadd x₂ 100)))))

remove-complex-operands:

  (program () (let ((x₁ 1)) (let ((x₂ (let ((x₃ 5)) (iadd x₃ x₃)))) (let ((_₁ (iadd x₂ 100))) (iadd x₁ _₁)))))

explicate-control:

  (c-program () (:begin ((= x₁ 1) (= x₃ 5) (= x₂ (iadd x₃ x₃)) (= _₁ (iadd x₂ 100)) (return (iadd x₁ _₁)))))

select-instructions:

  [#cons-x86-program
   [:contexts [:begin [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]]]
   [:begin
    [#cons-block
     [:context [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]]
     [['movq [[#imm-rand 1] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 5] [#var-rand 'x₃]]]
      ['movq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['addq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['movq [[#var-rand 'x₂] [#var-rand '_₁]]]
      ['addq [[#imm-rand 100] [#var-rand '_₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#var-rand '_₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-program
   [:contexts [:begin [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]]]
   [:begin
    [#cons-block
     [:context [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 5] [#var-rand 'x₃]]]
      ['movq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['addq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['movq [[#var-rand 'x₂] [#var-rand '_₁]]]
      ['addq [[#imm-rand 100] [#var-rand '_₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#var-rand '_₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-program
   [:contexts [:begin [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]]]
   [:begin
    [#cons-block
     [:context [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]
      :interference-graph
      [#cons-graph
       {[#var-rand 'x₁]
        [#var-rand 'x₃]
        [#var-rand 'x₂]
        [#var-rand '_₁]
        [#reg-rand 'rsp]
        [#reg-rand 'rax]}
       (@hash
         [#var-rand 'x₁]
         {[#reg-rand 'rsp] [#var-rand 'x₃] [#var-rand 'x₂] [#var-rand '_₁]}
         [#reg-rand 'rsp]
         {[#var-rand 'x₁]
          [#var-rand 'x₃]
          [#var-rand 'x₂]
          [#var-rand '_₁]
          [#reg-rand 'rax]}
         [#var-rand 'x₃] {[#var-rand 'x₁] [#reg-rand 'rsp]}
         [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]}
         [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
         [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
     [['movq [[#imm-rand 1] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 5] [#var-rand 'x₃]]]
      ['movq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['addq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['movq [[#var-rand 'x₂] [#var-rand '_₁]]]
      ['addq [[#imm-rand 100] [#var-rand '_₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#var-rand '_₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-program
   [:contexts [:begin [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]]]
   [:begin
    [#cons-block
     [:home-locations
      (@hash
        [#var-rand '_₁] [#reg-rand 'rcx]
        [#var-rand 'x₁] [#reg-rand 'rbx]
        [#var-rand 'x₃] [#reg-rand 'rcx]
        [#var-rand 'x₂] [#reg-rand 'rcx])
      :spill-count 0
      :callee-saved [[#reg-rand 'rbx]]
      :context [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]
      :interference-graph
      [#cons-graph
       {[#var-rand 'x₁]
        [#var-rand 'x₃]
        [#var-rand 'x₂]
        [#var-rand '_₁]
        [#reg-rand 'rsp]
        [#reg-rand 'rax]}
       (@hash
         [#var-rand 'x₁]
         {[#reg-rand 'rsp] [#var-rand 'x₃] [#var-rand 'x₂] [#var-rand '_₁]}
         [#reg-rand 'rsp]
         {[#var-rand 'x₁]
          [#var-rand 'x₃]
          [#var-rand 'x₂]
          [#var-rand '_₁]
          [#reg-rand 'rax]}
         [#var-rand 'x₃] {[#var-rand 'x₁] [#reg-rand 'rsp]}
         [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]}
         [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
         [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
     [['movq [[#imm-rand 1] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 5] [#var-rand 'x₃]]]
      ['movq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['addq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['movq [[#var-rand 'x₂] [#var-rand '_₁]]]
      ['addq [[#imm-rand 100] [#var-rand '_₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#var-rand '_₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

assign-homes:

  [#cons-x86-program
   [:contexts [:begin [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]]]
   [:begin
    [#cons-block
     [:home-locations
      (@hash
        [#var-rand '_₁] [#reg-rand 'rcx]
        [#var-rand 'x₁] [#reg-rand 'rbx]
        [#var-rand 'x₃] [#reg-rand 'rcx]
        [#var-rand 'x₂] [#reg-rand 'rcx])
      :spill-count 0
      :callee-saved [[#reg-rand 'rbx]]
      :context [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]
      :interference-graph
      [#cons-graph
       {[#var-rand 'x₁]
        [#var-rand 'x₃]
        [#var-rand 'x₂]
        [#var-rand '_₁]
        [#reg-rand 'rsp]
        [#reg-rand 'rax]}
       (@hash
         [#var-rand 'x₁]
         {[#reg-rand 'rsp] [#var-rand 'x₃] [#var-rand 'x₂] [#var-rand '_₁]}
         [#reg-rand 'rsp]
         {[#var-rand 'x₁]
          [#var-rand 'x₃]
          [#var-rand 'x₂]
          [#var-rand '_₁]
          [#reg-rand 'rax]}
         [#var-rand 'x₃] {[#var-rand 'x₁] [#reg-rand 'rsp]}
         [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]}
         [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
         [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
     [['movq [[#imm-rand 1] [#reg-rand 'rbx]]]
      ['movq [[#imm-rand 5] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rcx]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rcx]]]
      ['addq [[#imm-rand 100] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-program
   [:contexts [:begin [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]]]
   [:begin
    [#cons-block
     [:home-locations
      (@hash
        [#var-rand '_₁] [#reg-rand 'rcx]
        [#var-rand 'x₁] [#reg-rand 'rbx]
        [#var-rand 'x₃] [#reg-rand 'rcx]
        [#var-rand 'x₂] [#reg-rand 'rcx])
      :spill-count 0
      :callee-saved [[#reg-rand 'rbx]]
      :context [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]
      :interference-graph
      [#cons-graph
       {[#var-rand 'x₁]
        [#var-rand 'x₃]
        [#var-rand 'x₂]
        [#var-rand '_₁]
        [#reg-rand 'rsp]
        [#reg-rand 'rax]}
       (@hash
         [#var-rand 'x₁]
         {[#reg-rand 'rsp] [#var-rand 'x₃] [#var-rand 'x₂] [#var-rand '_₁]}
         [#reg-rand 'rsp]
         {[#var-rand 'x₁]
          [#var-rand 'x₃]
          [#var-rand 'x₂]
          [#var-rand '_₁]
          [#reg-rand 'rax]}
         [#var-rand 'x₃] {[#var-rand 'x₁] [#reg-rand 'rsp]}
         [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]}
         [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
         [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
     [['movq [[#imm-rand 1] [#reg-rand 'rbx]]]
      ['movq [[#imm-rand 5] [#reg-rand 'rcx]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rcx]]]
      ['addq [[#imm-rand 100] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-program
   [:contexts [:begin [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]]]
   [:begin
    [#cons-block
     []
     [['pushq [[#reg-rand 'rbp]]]
      ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]]
      ['pushq [[#reg-rand 'rbx]]]
      ['subq [[#imm-rand 8] [#reg-rand 'rsp]]]
      [#jmp 'begin.body]]]
    :begin.body
    [#cons-block
     [:home-locations
      (@hash
        [#var-rand '_₁] [#reg-rand 'rcx]
        [#var-rand 'x₁] [#reg-rand 'rbx]
        [#var-rand 'x₃] [#reg-rand 'rcx]
        [#var-rand 'x₂] [#reg-rand 'rcx])
      :spill-count 0
      :callee-saved [[#reg-rand 'rbx]]
      :context [:x₁ #int-t :x₃ #int-t :x₂ #int-t :_₁ #int-t]
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]
      :interference-graph
      [#cons-graph
       {[#var-rand 'x₁]
        [#var-rand 'x₃]
        [#var-rand 'x₂]
        [#var-rand '_₁]
        [#reg-rand 'rsp]
        [#reg-rand 'rax]}
       (@hash
         [#var-rand 'x₁]
         {[#reg-rand 'rsp] [#var-rand 'x₃] [#var-rand 'x₂] [#var-rand '_₁]}
         [#reg-rand 'rsp]
         {[#var-rand 'x₁]
          [#var-rand 'x₃]
          [#var-rand 'x₂]
          [#var-rand '_₁]
          [#reg-rand 'rax]}
         [#var-rand 'x₃] {[#var-rand 'x₁] [#reg-rand 'rsp]}
         [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]}
         [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
         [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
     [['movq [[#imm-rand 1] [#reg-rand 'rbx]]]
      ['movq [[#imm-rand 5] [#reg-rand 'rcx]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rcx]]]
      ['addq [[#imm-rand 100] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]
    :begin.epilog
    [#cons-block
     []
     [['addq [[#imm-rand 8] [#reg-rand 'rsp]]]
      ['popq [[#reg-rand 'rbx]]]
      ['popq [[#reg-rand 'rbp]]]
      #retq]]]]

