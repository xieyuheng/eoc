mod:

  (mod () (let ((x 1)) (iadd x (let ((x (let ((x 5)) (iadd x x)))) (iadd x 100)))))

shrink:

  (mod () (let ((x 1)) (iadd x (let ((x (let ((x 5)) (iadd x x)))) (iadd x 100)))))

uniquify:

  (mod () (let ((x₁ 1)) (iadd x₁ (let ((x₂ (let ((x₃ 5)) (iadd x₃ x₃)))) (iadd x₂ 100)))))

check-type:

  (mod () (the int-t (let ((x₁ (the int-t 1))) (the int-t (iadd (the int-t x₁) (the int-t (let ((x₂ (the int-t (let ((x₃ (the int-t 5))) (the int-t (iadd (the int-t x₃) (the int-t x₃))))))) (the int-t (iadd (the int-t x₂) (the int-t 100))))))))))

remove-complex-operands:

  (mod () (the int-t (let ((x₁ (the int-t 1))) (the int-t (let ((x₂ (the int-t (let ((x₃ (the int-t 5))) (the int-t (iadd (the int-t x₃) (the int-t x₃))))))) (the int-t (let ((_₁ (the int-t (iadd (the int-t x₂) (the int-t 100))))) (the int-t (iadd (the int-t x₁) (the int-t _₁))))))))))

explicate-control:

  [#cons-c-mod
   []
   [:begin
    [#cons-seq
     [#assign-stmt [#var-c-exp 'x₁] #int-type [#int-c-exp 1]]
     [#cons-seq
      [#assign-stmt [#var-c-exp 'x₃] #int-type [#int-c-exp 5]]
      [#cons-seq
       [#assign-stmt
        [#var-c-exp 'x₂]
        #int-type
        [#prim-c-exp 'iadd [[#var-c-exp 'x₃] [#var-c-exp 'x₃]]]]
       [#cons-seq
        [#assign-stmt
         [#var-c-exp '_₁]
         #int-type
         [#prim-c-exp 'iadd [[#var-c-exp 'x₂] [#int-c-exp 100]]]]
        [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'x₁] [#var-c-exp '_₁]]]]]]]]]]

uncover-locals:

  [#cons-c-mod
   [:locals [:x₁ #int-type :x₃ #int-type :x₂ #int-type :_₁ #int-type]]
   [:begin
    [#cons-seq
     [#assign-stmt [#var-c-exp 'x₁] #int-type [#int-c-exp 1]]
     [#cons-seq
      [#assign-stmt [#var-c-exp 'x₃] #int-type [#int-c-exp 5]]
      [#cons-seq
       [#assign-stmt
        [#var-c-exp 'x₂]
        #int-type
        [#prim-c-exp 'iadd [[#var-c-exp 'x₃] [#var-c-exp 'x₃]]]]
       [#cons-seq
        [#assign-stmt
         [#var-c-exp '_₁]
         #int-type
         [#prim-c-exp 'iadd [[#var-c-exp 'x₂] [#int-c-exp 100]]]]
        [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'x₁] [#var-c-exp '_₁]]]]]]]]]]

select-instructions:

  [#cons-x86-mod
   [:locals [:x₁ #int-type :x₃ #int-type :x₂ #int-type :_₁ #int-type]]
   [:begin
    [#cons-block
     []
     [['movq [[#imm-rand 1] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 5] [#var-rand 'x₃]]]
      ['movq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['addq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['movq [[#var-rand 'x₂] [#var-rand '_₁]]]
      ['addq [[#imm-rand 100] [#var-rand '_₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#var-rand '_₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-mod
   [:locals [:x₁ #int-type :x₃ #int-type :x₂ #int-type :_₁ #int-type]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 5] [#var-rand 'x₃]]]
      ['movq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['addq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['movq [[#var-rand 'x₂] [#var-rand '_₁]]]
      ['addq [[#imm-rand 100] [#var-rand '_₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#var-rand '_₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-mod
   [:locals [:x₁ #int-type :x₃ #int-type :x₂ #int-type :_₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'x₃]
      [#var-rand 'x₂]
      [#var-rand '_₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁]
       {[#reg-rand 'rsp] [#var-rand 'x₃] [#var-rand 'x₂] [#var-rand '_₁]}
       [#var-rand 'x₃] {[#var-rand 'x₁] [#reg-rand 'rsp]}
       [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]}
       [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁]
        [#var-rand 'x₃]
        [#var-rand 'x₂]
        [#var-rand '_₁]
        [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 5] [#var-rand 'x₃]]]
      ['movq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['addq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['movq [[#var-rand 'x₂] [#var-rand '_₁]]]
      ['addq [[#imm-rand 100] [#var-rand '_₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#var-rand '_₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-mod
   [:home-locations
    (@hash
      [#var-rand '_₁] [#reg-rand 'rcx]
      [#var-rand 'x₁] [#reg-rand 'rbx]
      [#var-rand 'x₃] [#reg-rand 'rcx]
      [#var-rand 'x₂] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved [[#reg-rand 'rbx]]
    :locals [:x₁ #int-type :x₃ #int-type :x₂ #int-type :_₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'x₃]
      [#var-rand 'x₂]
      [#var-rand '_₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁]
       {[#reg-rand 'rsp] [#var-rand 'x₃] [#var-rand 'x₂] [#var-rand '_₁]}
       [#var-rand 'x₃] {[#var-rand 'x₁] [#reg-rand 'rsp]}
       [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]}
       [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁]
        [#var-rand 'x₃]
        [#var-rand 'x₂]
        [#var-rand '_₁]
        [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 5] [#var-rand 'x₃]]]
      ['movq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['addq [[#var-rand 'x₃] [#var-rand 'x₂]]]
      ['movq [[#var-rand 'x₂] [#var-rand '_₁]]]
      ['addq [[#imm-rand 100] [#var-rand '_₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#var-rand '_₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

assign-homes:

  [#cons-x86-mod
   [:home-locations
    (@hash
      [#var-rand '_₁] [#reg-rand 'rcx]
      [#var-rand 'x₁] [#reg-rand 'rbx]
      [#var-rand 'x₃] [#reg-rand 'rcx]
      [#var-rand 'x₂] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved [[#reg-rand 'rbx]]
    :locals [:x₁ #int-type :x₃ #int-type :x₂ #int-type :_₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'x₃]
      [#var-rand 'x₂]
      [#var-rand '_₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁]
       {[#reg-rand 'rsp] [#var-rand 'x₃] [#var-rand 'x₂] [#var-rand '_₁]}
       [#var-rand 'x₃] {[#var-rand 'x₁] [#reg-rand 'rsp]}
       [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]}
       [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁]
        [#var-rand 'x₃]
        [#var-rand 'x₂]
        [#var-rand '_₁]
        [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#reg-rand 'rbx]]]
      ['movq [[#imm-rand 5] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rcx]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rcx]]]
      ['addq [[#imm-rand 100] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-mod
   [:home-locations
    (@hash
      [#var-rand '_₁] [#reg-rand 'rcx]
      [#var-rand 'x₁] [#reg-rand 'rbx]
      [#var-rand 'x₃] [#reg-rand 'rcx]
      [#var-rand 'x₂] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved [[#reg-rand 'rbx]]
    :locals [:x₁ #int-type :x₃ #int-type :x₂ #int-type :_₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'x₃]
      [#var-rand 'x₂]
      [#var-rand '_₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁]
       {[#reg-rand 'rsp] [#var-rand 'x₃] [#var-rand 'x₂] [#var-rand '_₁]}
       [#var-rand 'x₃] {[#var-rand 'x₁] [#reg-rand 'rsp]}
       [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]}
       [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁]
        [#var-rand 'x₃]
        [#var-rand 'x₂]
        [#var-rand '_₁]
        [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#reg-rand 'rbx]]]
      ['movq [[#imm-rand 5] [#reg-rand 'rcx]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rcx]]]
      ['addq [[#imm-rand 100] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-mod
   [:home-locations
    (@hash
      [#var-rand '_₁] [#reg-rand 'rcx]
      [#var-rand 'x₁] [#reg-rand 'rbx]
      [#var-rand 'x₃] [#reg-rand 'rcx]
      [#var-rand 'x₂] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved [[#reg-rand 'rbx]]
    :locals [:x₁ #int-type :x₃ #int-type :x₂ #int-type :_₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'x₃]
      [#var-rand 'x₂]
      [#var-rand '_₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁]
       {[#reg-rand 'rsp] [#var-rand 'x₃] [#var-rand 'x₂] [#var-rand '_₁]}
       [#var-rand 'x₃] {[#var-rand 'x₁] [#reg-rand 'rsp]}
       [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp]}
       [#var-rand '_₁] {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁]
        [#var-rand 'x₃]
        [#var-rand 'x₂]
        [#var-rand '_₁]
        [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     []
     [['pushq [[#reg-rand 'rbp]]]
      ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]]
      ['pushq [[#reg-rand 'rbx]]]
      ['subq [[#imm-rand 8] [#reg-rand 'rsp]]]
      [#jmp 'begin.body]]]
    :begin.body
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₃] [#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#reg-rand 'rbx]]]
      ['movq [[#imm-rand 5] [#reg-rand 'rcx]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rcx]]]
      ['addq [[#imm-rand 100] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]
    :begin.epilog
    [#cons-block
     []
     [['addq [[#imm-rand 8] [#reg-rand 'rsp]]]
      ['popq [[#reg-rand 'rbx]]]
      ['popq [[#reg-rand 'rbp]]]
      #retq]]]]

