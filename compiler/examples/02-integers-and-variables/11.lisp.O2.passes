program:

  (program () (iadd (iadd 1 2) (iadd 3 4)))

partial-eval:

  (program () 10)

uniquify:

  (program () 10)

remove-complex-operands:

  (program () 10)

explicate-control:

  (c-program () (:start ((return 10))))

select-instructions:

  [#cons-x86-program [:ctx []] [:start [#cons-block [] [['movq [[#imm-rand 10] [#reg-rand 'rax]]] [#jmp 'epilog]]]]]

uncover-live:

  [#cons-x86-program [:ctx []] [:start [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]}] [['movq [[#imm-rand 10] [#reg-rand 'rax]]] [#jmp 'epilog]]]]]

build-interference:

  [#cons-x86-program [:ctx []] [:start [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#reg-rand 'rax] [#reg-rand 'rsp]} (@hash [#reg-rand 'rax] {[#reg-rand 'rsp]} [#reg-rand 'rsp] {[#reg-rand 'rax]})]] [['movq [[#imm-rand 10] [#reg-rand 'rax]]] [#jmp 'epilog]]]]]

assign-homes:

  [#cons-x86-program [:ctx [] :stack-space 0] [:start [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#reg-rand 'rax] [#reg-rand 'rsp]} (@hash [#reg-rand 'rax] {[#reg-rand 'rsp]} [#reg-rand 'rsp] {[#reg-rand 'rax]})]] [['movq [[#imm-rand 10] [#reg-rand 'rax]]] [#jmp 'epilog]]]]]

patch-instructions:

  [#cons-x86-program [:ctx [] :stack-space 0] [:start [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#reg-rand 'rax] [#reg-rand 'rsp]} (@hash [#reg-rand 'rax] {[#reg-rand 'rsp]} [#reg-rand 'rsp] {[#reg-rand 'rax]})]] [['movq [[#imm-rand 10] [#reg-rand 'rax]]] [#jmp 'epilog]]]]]

prolog-and-epilog:

  [#cons-x86-program [:ctx [] :stack-space 0] [:start [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#reg-rand 'rax] [#reg-rand 'rsp]} (@hash [#reg-rand 'rax] {[#reg-rand 'rsp]} [#reg-rand 'rsp] {[#reg-rand 'rax]})]] [['movq [[#imm-rand 10] [#reg-rand 'rax]]] [#jmp 'epilog]]] :begin [#cons-block [] [['pushq [[#reg-rand 'rbp]]] ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]] [#jmp 'start]]] :epilog [#cons-block [] [['popq [[#reg-rand 'rbp]]] #retq]]]]

