mod:

  (mod () (ineg (random-dice)))

shrink:

  (mod () (ineg (random-dice)))

uniquify:

  (mod () (ineg (random-dice)))

remove-complex-operands:

  (mod () (let ((_₁ (random-dice))) (ineg _₁)))

explicate-control:

  [#cons-c-mod
   []
   [:begin
    [#cons-seq
     [#assign-stmt [#var-c-exp '_₁] [#prim-c-exp 'random-dice []]]
     [#return-seq [#prim-c-exp 'ineg [[#var-c-exp '_₁]]]]]]]

select-instructions:

  [#cons-x86-mod
   [:context [:_₁ #int-type]]
   [:begin
    [#cons-block
     []
     [[#callq 'random_dice 0]
      ['movq [[#reg-rand 'rax] [#var-rand '_₁]]]
      ['movq [[#var-rand '_₁] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-mod
   [:context [:_₁ #int-type]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [[#callq 'random_dice 0]
      ['movq [[#reg-rand 'rax] [#var-rand '_₁]]]
      ['movq [[#var-rand '_₁] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-mod
   [:context [:_₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand '_₁]
      [#reg-rand 'rax]
      [#reg-rand 'rsp]
      [#reg-rand 'rcx]
      [#reg-rand 'rdx]
      [#reg-rand 'rsi]
      [#reg-rand 'rdi]
      [#reg-rand 'r8]
      [#reg-rand 'r9]
      [#reg-rand 'r10]
      [#reg-rand 'r11]}
     (@hash
       [#var-rand '_₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rax]
       {[#reg-rand 'rsp]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]}
       [#reg-rand 'rsp]
       {[#reg-rand 'rax]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]
        [#var-rand '_₁]}
       [#reg-rand 'rcx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rsi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r8] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r9] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r10] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r11] {[#reg-rand 'rax] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [[#callq 'random_dice 0]
      ['movq [[#reg-rand 'rax] [#var-rand '_₁]]]
      ['movq [[#var-rand '_₁] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-mod
   [:home-locations (@hash [#var-rand '_₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :context [:_₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand '_₁]
      [#reg-rand 'rax]
      [#reg-rand 'rsp]
      [#reg-rand 'rcx]
      [#reg-rand 'rdx]
      [#reg-rand 'rsi]
      [#reg-rand 'rdi]
      [#reg-rand 'r8]
      [#reg-rand 'r9]
      [#reg-rand 'r10]
      [#reg-rand 'r11]}
     (@hash
       [#var-rand '_₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rax]
       {[#reg-rand 'rsp]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]}
       [#reg-rand 'rsp]
       {[#reg-rand 'rax]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]
        [#var-rand '_₁]}
       [#reg-rand 'rcx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rsi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r8] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r9] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r10] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r11] {[#reg-rand 'rax] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [[#callq 'random_dice 0]
      ['movq [[#reg-rand 'rax] [#var-rand '_₁]]]
      ['movq [[#var-rand '_₁] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

assign-homes:

  [#cons-x86-mod
   [:home-locations (@hash [#var-rand '_₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :context [:_₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand '_₁]
      [#reg-rand 'rax]
      [#reg-rand 'rsp]
      [#reg-rand 'rcx]
      [#reg-rand 'rdx]
      [#reg-rand 'rsi]
      [#reg-rand 'rdi]
      [#reg-rand 'r8]
      [#reg-rand 'r9]
      [#reg-rand 'r10]
      [#reg-rand 'r11]}
     (@hash
       [#var-rand '_₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rax]
       {[#reg-rand 'rsp]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]}
       [#reg-rand 'rsp]
       {[#reg-rand 'rax]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]
        [#var-rand '_₁]}
       [#reg-rand 'rcx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rsi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r8] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r9] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r10] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r11] {[#reg-rand 'rax] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [[#callq 'random_dice 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-mod
   [:home-locations (@hash [#var-rand '_₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :context [:_₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand '_₁]
      [#reg-rand 'rax]
      [#reg-rand 'rsp]
      [#reg-rand 'rcx]
      [#reg-rand 'rdx]
      [#reg-rand 'rsi]
      [#reg-rand 'rdi]
      [#reg-rand 'r8]
      [#reg-rand 'r9]
      [#reg-rand 'r10]
      [#reg-rand 'r11]}
     (@hash
       [#var-rand '_₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rax]
       {[#reg-rand 'rsp]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]}
       [#reg-rand 'rsp]
       {[#reg-rand 'rax]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]
        [#var-rand '_₁]}
       [#reg-rand 'rcx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rsi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r8] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r9] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r10] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r11] {[#reg-rand 'rax] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [[#callq 'random_dice 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-mod
   [:home-locations (@hash [#var-rand '_₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :context [:_₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand '_₁]
      [#reg-rand 'rax]
      [#reg-rand 'rsp]
      [#reg-rand 'rcx]
      [#reg-rand 'rdx]
      [#reg-rand 'rsi]
      [#reg-rand 'rdi]
      [#reg-rand 'r8]
      [#reg-rand 'r9]
      [#reg-rand 'r10]
      [#reg-rand 'r11]}
     (@hash
       [#var-rand '_₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rax]
       {[#reg-rand 'rsp]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]}
       [#reg-rand 'rsp]
       {[#reg-rand 'rax]
        [#reg-rand 'rcx]
        [#reg-rand 'rdx]
        [#reg-rand 'rsi]
        [#reg-rand 'rdi]
        [#reg-rand 'r8]
        [#reg-rand 'r9]
        [#reg-rand 'r10]
        [#reg-rand 'r11]
        [#var-rand '_₁]}
       [#reg-rand 'rcx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdx] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rsi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'rdi] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r8] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r9] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r10] {[#reg-rand 'rax] [#reg-rand 'rsp]}
       [#reg-rand 'r11] {[#reg-rand 'rax] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     []
     [['pushq [[#reg-rand 'rbp]]]
      ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]]
      [#jmp 'begin.body]]]
    :begin.body
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [[#callq 'random_dice 0]
      ['movq [[#reg-rand 'rax] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]
    :begin.epilog [#cons-block [] [['popq [[#reg-rand 'rbp]]] #retq]]]]

