000 (program () (let ((x (let ((x 4)) (iadd x 1)))) (iadd x 2)))
010 (program () (let ((x₁ (let ((x₂ 4)) (iadd x₂ 1)))) (iadd x₁ 2)))
020 (program () (let ((x₁ (let ((x₂ 4)) (iadd x₂ 1)))) (iadd x₁ 2)))
030 (c-program (:ctx (:x₂ int-t :x₁ int-t)) (:start ((= x₂ 4) (= x₁ (iadd x₂ 1)) (return (iadd x₁ 2)))))
040 (cons-x86-program [:ctx [:x₂ int-t :x₁ int-t]] [:start (cons-block [] [['movq [(imm-rand 4) (var-rand 'x₂)]] ['movq [(var-rand 'x₂) (var-rand 'x₁)]] ['addq [(imm-rand 1) (var-rand 'x₁)]] ['movq [(var-rand 'x₁) (reg-rand 'rax)]] ['addq [(imm-rand 2) (reg-rand 'rax)]] (jmp 'epilog)])])
050 (cons-x86-program [:ctx [:x₂ int-t :x₁ int-t]] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 4) (var-rand 'x₂)]] ['movq [(var-rand 'x₂) (var-rand 'x₁)]] ['addq [(imm-rand 1) (var-rand 'x₁)]] ['movq [(var-rand 'x₁) (reg-rand 'rax)]] ['addq [(imm-rand 2) (reg-rand 'rax)]] (jmp 'epilog)])])
060 (cons-x86-program [:ctx [:x₂ int-t :x₁ int-t] :stack-space 16] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 4) (deref-rand 'rbp -8)]] ['movq [(deref-rand 'rbp -8) (deref-rand 'rbp -16)]] ['addq [(imm-rand 1) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] ['addq [(imm-rand 2) (reg-rand 'rax)]] (jmp 'epilog)])])
070 (cons-x86-program [:ctx [:x₂ int-t :x₁ int-t] :stack-space 16] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 4) (deref-rand 'rbp -8)]] ['movq [(deref-rand 'rbp -8) (reg-rand 'rax)]] ['movq [(reg-rand 'rax) (deref-rand 'rbp -16)]] ['addq [(imm-rand 1) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] ['addq [(imm-rand 2) (reg-rand 'rax)]] (jmp 'epilog)])])
080 (cons-x86-program [:ctx [:x₂ int-t :x₁ int-t] :stack-space 16] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 4) (deref-rand 'rbp -8)]] ['movq [(deref-rand 'rbp -8) (reg-rand 'rax)]] ['movq [(reg-rand 'rax) (deref-rand 'rbp -16)]] ['addq [(imm-rand 1) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] ['addq [(imm-rand 2) (reg-rand 'rax)]] (jmp 'epilog)]) :begin (cons-block [] [['pushq [(reg-rand 'rbp)]] ['movq [(reg-rand 'rsp) (reg-rand 'rbp)]] ['subq [(imm-rand 16) (reg-rand 'rsp)]] (jmp 'start)]) :epilog (cons-block [] [['addq [(imm-rand 16) (reg-rand 'rsp)]] ['popq [(reg-rand 'rbp)]] retq])])
