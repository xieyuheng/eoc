program:

  (program () (iadd 20 (iadd 11 11)))

uniquify:

  (program () (iadd 20 (iadd 11 11)))

remove-complex-operands:

  (program () (let ((_₁ (iadd 11 11))) (iadd 20 _₁)))

explicate-control:

  [#cons-c-program
   []
   [:begin
    [#cons-seq
     [#assign-stmt
      [#var-c-exp '_₁]
      [#prim-c-exp 'iadd [[#int-c-exp 11] [#int-c-exp 11]]]]
     [#return-seq [#prim-c-exp 'iadd [[#int-c-exp 20] [#var-c-exp '_₁]]]]]]]

select-instructions:

  [#cons-x86-program
   [:contexts [:begin [:_₁ #int-t]]]
   [:begin
    [#cons-block
     [:context [:_₁ #int-t]]
     [['movq [[#imm-rand 11] [#var-rand '_₁]]]
      ['addq [[#imm-rand 11] [#var-rand '_₁]]]
      ['movq [[#imm-rand 20] [#reg-rand 'rax]]]
      ['addq [[#var-rand '_₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-program
   [:contexts [:begin [:_₁ #int-t]]]
   [:begin
    [#cons-block
     [:context [:_₁ #int-t]
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 11] [#var-rand '_₁]]]
      ['addq [[#imm-rand 11] [#var-rand '_₁]]]
      ['movq [[#imm-rand 20] [#reg-rand 'rax]]]
      ['addq [[#var-rand '_₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-program
   [:contexts [:begin [:_₁ #int-t]]]
   [:begin
    [#cons-block
     [:context [:_₁ #int-t]
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]
      :interference-graph
      [#cons-graph
       {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
       (@hash
         [#var-rand '_₁] {[#reg-rand 'rsp] [#reg-rand 'rax]}
         [#reg-rand 'rsp] {[#var-rand '_₁] [#reg-rand 'rax]}
         [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
     [['movq [[#imm-rand 11] [#var-rand '_₁]]]
      ['addq [[#imm-rand 11] [#var-rand '_₁]]]
      ['movq [[#imm-rand 20] [#reg-rand 'rax]]]
      ['addq [[#var-rand '_₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-program
   [:contexts [:begin [:_₁ #int-t]]]
   [:begin
    [#cons-block
     [:home-locations (@hash [#var-rand '_₁] [#reg-rand 'rcx])
      :spill-count 0
      :callee-saved []
      :context [:_₁ #int-t]
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]
      :interference-graph
      [#cons-graph
       {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
       (@hash
         [#var-rand '_₁] {[#reg-rand 'rsp] [#reg-rand 'rax]}
         [#reg-rand 'rsp] {[#var-rand '_₁] [#reg-rand 'rax]}
         [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
     [['movq [[#imm-rand 11] [#var-rand '_₁]]]
      ['addq [[#imm-rand 11] [#var-rand '_₁]]]
      ['movq [[#imm-rand 20] [#reg-rand 'rax]]]
      ['addq [[#var-rand '_₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

assign-homes:

  [#cons-x86-program
   [:contexts [:begin [:_₁ #int-t]]]
   [:begin
    [#cons-block
     [:home-locations (@hash [#var-rand '_₁] [#reg-rand 'rcx])
      :spill-count 0
      :callee-saved []
      :context [:_₁ #int-t]
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]
      :interference-graph
      [#cons-graph
       {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
       (@hash
         [#var-rand '_₁] {[#reg-rand 'rsp] [#reg-rand 'rax]}
         [#reg-rand 'rsp] {[#var-rand '_₁] [#reg-rand 'rax]}
         [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
     [['movq [[#imm-rand 11] [#reg-rand 'rcx]]]
      ['addq [[#imm-rand 11] [#reg-rand 'rcx]]]
      ['movq [[#imm-rand 20] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-program
   [:contexts [:begin [:_₁ #int-t]]]
   [:begin
    [#cons-block
     [:home-locations (@hash [#var-rand '_₁] [#reg-rand 'rcx])
      :spill-count 0
      :callee-saved []
      :context [:_₁ #int-t]
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]
      :interference-graph
      [#cons-graph
       {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
       (@hash
         [#var-rand '_₁] {[#reg-rand 'rsp] [#reg-rand 'rax]}
         [#reg-rand 'rsp] {[#var-rand '_₁] [#reg-rand 'rax]}
         [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
     [['movq [[#imm-rand 11] [#reg-rand 'rcx]]]
      ['addq [[#imm-rand 11] [#reg-rand 'rcx]]]
      ['movq [[#imm-rand 20] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-program
   [:contexts [:begin [:_₁ #int-t]]]
   [:begin
    [#cons-block
     []
     [['pushq [[#reg-rand 'rbp]]]
      ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]]
      [#jmp 'begin.body]]]
    :begin.body
    [#cons-block
     [:home-locations (@hash [#var-rand '_₁] [#reg-rand 'rcx])
      :spill-count 0
      :callee-saved []
      :context [:_₁ #int-t]
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]
      :interference-graph
      [#cons-graph
       {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
       (@hash
         [#var-rand '_₁] {[#reg-rand 'rsp] [#reg-rand 'rax]}
         [#reg-rand 'rsp] {[#var-rand '_₁] [#reg-rand 'rax]}
         [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]]
     [['movq [[#imm-rand 11] [#reg-rand 'rcx]]]
      ['addq [[#imm-rand 11] [#reg-rand 'rcx]]]
      ['movq [[#imm-rand 20] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]
    :begin.epilog [#cons-block [] [['popq [[#reg-rand 'rbp]]] #retq]]]]

