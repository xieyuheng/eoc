program:

  (program () (iadd 20 (iadd 11 11)))

uniquify:

  (program () (iadd 20 (iadd 11 11)))

remove-complex-operands:

  (program () (let ((_₁ (iadd 11 11))) (iadd 20 _₁)))

explicate-control:

  (c-program () (:begin ((= _₁ (iadd 11 11)) (return (iadd 20 _₁)))))

select-instructions:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t] :stack-space 8] [['movq [[#imm-rand 11] [#var-rand '_₁]]] ['addq [[#imm-rand 11] [#var-rand '_₁]]] ['movq [[#imm-rand 20] [#reg-rand 'rax]]] ['addq [[#var-rand '_₁] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t] :stack-space 8 :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]}] [['movq [[#imm-rand 11] [#var-rand '_₁]]] ['addq [[#imm-rand 11] [#var-rand '_₁]]] ['movq [[#imm-rand 20] [#reg-rand 'rax]]] ['addq [[#var-rand '_₁] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t] :stack-space 8 :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]} (@hash [#var-rand '_₁] {[#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rsp] {[#var-rand '_₁] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]] [['movq [[#imm-rand 11] [#var-rand '_₁]]] ['addq [[#imm-rand 11] [#var-rand '_₁]]] ['movq [[#imm-rand 20] [#reg-rand 'rax]]] ['addq [[#var-rand '_₁] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t] :stack-space 8 :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]} (@hash [#var-rand '_₁] {[#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rsp] {[#var-rand '_₁] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]] [['movq [[#imm-rand 11] [#deref-rand 'rbp -8]]] ['addq [[#imm-rand 11] [#deref-rand 'rbp -8]]] ['movq [[#imm-rand 20] [#reg-rand 'rax]]] ['addq [[#deref-rand 'rbp -8] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t] :stack-space 8 :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]} (@hash [#var-rand '_₁] {[#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rsp] {[#var-rand '_₁] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]] [['movq [[#imm-rand 11] [#deref-rand 'rbp -8]]] ['addq [[#imm-rand 11] [#deref-rand 'rbp -8]]] ['movq [[#imm-rand 20] [#reg-rand 'rax]]] ['addq [[#deref-rand 'rbp -8] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t]]] [:begin [#cons-block [] [['pushq [[#reg-rand 'rbp]]] ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]] ['subq [[#imm-rand 8] [#reg-rand 'rsp]]] [#jmp 'begin.body]]] :begin.body [#cons-block [:context [:_₁ #int-t] :stack-space 8 :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]} (@hash [#var-rand '_₁] {[#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rsp] {[#var-rand '_₁] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand '_₁] [#reg-rand 'rsp]})]] [['movq [[#imm-rand 11] [#deref-rand 'rbp -8]]] ['addq [[#imm-rand 11] [#deref-rand 'rbp -8]]] ['movq [[#imm-rand 20] [#reg-rand 'rax]]] ['addq [[#deref-rand 'rbp -8] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]] :begin.epilog [#cons-block [] [['addq [[#imm-rand 8] [#reg-rand 'rsp]]] ['popq [[#reg-rand 'rbp]]] #retq]]]]

