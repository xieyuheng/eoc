000 (program () (let ((y (let ((x 20)) (let ((z 22)) (iadd x z))))) y))
010 (program () (let ((y₁ (let ((x₁ 20)) (let ((z₁ 22)) (iadd x₁ z₁))))) y₁))
020 (program () (let ((y₁ (let ((x₁ 20)) (let ((z₁ 22)) (iadd x₁ z₁))))) y₁))
030 (c-program (:ctx (:x₁ int-t :z₁ int-t :y₁ int-t)) (:start ((= x₁ 20) (= z₁ 22) (= y₁ (iadd x₁ z₁)) (return y₁))))
040 (cons-x86-program [:ctx [:x₁ int-t :z₁ int-t :y₁ int-t]] [:start (cons-block [] [['movq [(imm-rand 20) (var-rand 'x₁)]] ['movq [(imm-rand 22) (var-rand 'z₁)]] ['movq [(var-rand 'x₁) (var-rand 'y₁)]] ['addq [(var-rand 'z₁) (var-rand 'y₁)]] ['movq [(var-rand 'y₁) (reg-rand 'rax)]] (jmp 'epilog)])])
050 (cons-x86-program [:ctx [:x₁ int-t :z₁ int-t :y₁ int-t]] [:start (cons-block [:live-after-instrs [{(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)}] [['movq [(imm-rand 20) (var-rand 'x₁)]] ['movq [(imm-rand 22) (var-rand 'z₁)]] ['movq [(var-rand 'x₁) (var-rand 'y₁)]] ['addq [(var-rand 'z₁) (var-rand 'y₁)]] ['movq [(var-rand 'y₁) (reg-rand 'rax)]] (jmp 'epilog)])])
060 (cons-x86-program [:ctx [:x₁ int-t :z₁ int-t :y₁ int-t] :stack-space 24] [:start (cons-block [:live-after-instrs [{(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)}] [['movq [(imm-rand 20) (deref-rand 'rbp -8)]] ['movq [(imm-rand 22) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -8) (deref-rand 'rbp -24)]] ['addq [(deref-rand 'rbp -16) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -24) (reg-rand 'rax)]] (jmp 'epilog)])])
070 (cons-x86-program [:ctx [:x₁ int-t :z₁ int-t :y₁ int-t] :stack-space 24] [:start (cons-block [:live-after-instrs [{(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)}] [['movq [(imm-rand 20) (deref-rand 'rbp -8)]] ['movq [(imm-rand 22) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -8) (reg-rand 'rax)]] ['movq [(reg-rand 'rax) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] ['addq [(reg-rand 'rax) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -24) (reg-rand 'rax)]] (jmp 'epilog)])])
080 (cons-x86-program [:ctx [:x₁ int-t :z₁ int-t :y₁ int-t] :stack-space 24] [:start (cons-block [:live-after-instrs [{(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(var-rand 'x₁) (var-rand 'z₁) (var-rand 'y₁) (reg-rand 'rsp) (reg-rand 'rax)}] [['movq [(imm-rand 20) (deref-rand 'rbp -8)]] ['movq [(imm-rand 22) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -8) (reg-rand 'rax)]] ['movq [(reg-rand 'rax) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] ['addq [(reg-rand 'rax) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -24) (reg-rand 'rax)]] (jmp 'epilog)]) :begin (cons-block [] [['pushq [(reg-rand 'rbp)]] ['movq [(reg-rand 'rsp) (reg-rand 'rbp)]] ['subq [(imm-rand 16) (reg-rand 'rsp)]] (jmp 'start)]) :epilog (cons-block [] [['addq [(imm-rand 16) (reg-rand 'rsp)]] ['popq [(reg-rand 'rbp)]] retq])])
