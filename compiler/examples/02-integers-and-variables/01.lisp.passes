program:

  (program () (let ((x 4)) (iadd 8 x)))

uniquify:

  (program () (let ((x₁ 4)) (iadd 8 x₁)))

remove-complex-operands:

  (program () (let ((x₁ 4)) (iadd 8 x₁)))

explicate-control:

  (c-program () (:start ((= x₁ 4) (return (iadd 8 x₁)))))

select-instructions:

  [#cons-x86-program [:ctx [:x₁ #int-t]] [:start [#cons-block [] [['movq [[#imm-rand 4] [#var-rand 'x₁]]] ['movq [[#imm-rand 8] [#reg-rand 'rax]]] ['addq [[#var-rand 'x₁] [#reg-rand 'rax]]] [#jmp 'epilog]]]]]

uncover-live:

  [#cons-x86-program [:ctx [:x₁ #int-t]] [:start [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]}] [['movq [[#imm-rand 4] [#var-rand 'x₁]]] ['movq [[#imm-rand 8] [#reg-rand 'rax]]] ['addq [[#var-rand 'x₁] [#reg-rand 'rax]]] [#jmp 'epilog]]]]]

build-interference:

  [#cons-x86-program [:ctx [:x₁ #int-t]] [:start [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]} (@hash [#var-rand 'x₁] {[#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rsp] {[#var-rand 'x₁] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand 'x₁] [#reg-rand 'rsp]})]] [['movq [[#imm-rand 4] [#var-rand 'x₁]]] ['movq [[#imm-rand 8] [#reg-rand 'rax]]] ['addq [[#var-rand 'x₁] [#reg-rand 'rax]]] [#jmp 'epilog]]]]]

allocate-registers:

  [#cons-x86-program [:ctx [:x₁ #int-t]] [:start [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]} (@hash [#var-rand 'x₁] {[#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rsp] {[#var-rand 'x₁] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand 'x₁] [#reg-rand 'rsp]})]] [['movq [[#imm-rand 4] [#var-rand 'x₁]]] ['movq [[#imm-rand 8] [#reg-rand 'rax]]] ['addq [[#var-rand 'x₁] [#reg-rand 'rax]]] [#jmp 'epilog]]]]]

assign-homes:

  [#cons-x86-program [:ctx [:x₁ #int-t] :stack-space 8] [:start [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]} (@hash [#var-rand 'x₁] {[#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rsp] {[#var-rand 'x₁] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand 'x₁] [#reg-rand 'rsp]})]] [['movq [[#imm-rand 4] [#deref-rand 'rbp -8]]] ['movq [[#imm-rand 8] [#reg-rand 'rax]]] ['addq [[#deref-rand 'rbp -8] [#reg-rand 'rax]]] [#jmp 'epilog]]]]]

patch-instructions:

  [#cons-x86-program [:ctx [:x₁ #int-t] :stack-space 8] [:start [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]} (@hash [#var-rand 'x₁] {[#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rsp] {[#var-rand 'x₁] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand 'x₁] [#reg-rand 'rsp]})]] [['movq [[#imm-rand 4] [#deref-rand 'rbp -8]]] ['movq [[#imm-rand 8] [#reg-rand 'rax]]] ['addq [[#deref-rand 'rbp -8] [#reg-rand 'rax]]] [#jmp 'epilog]]]]]

prolog-and-epilog:

  [#cons-x86-program [:ctx [:x₁ #int-t] :stack-space 8] [:start [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]} (@hash [#var-rand 'x₁] {[#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rsp] {[#var-rand 'x₁] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand 'x₁] [#reg-rand 'rsp]})]] [['movq [[#imm-rand 4] [#deref-rand 'rbp -8]]] ['movq [[#imm-rand 8] [#reg-rand 'rax]]] ['addq [[#deref-rand 'rbp -8] [#reg-rand 'rax]]] [#jmp 'epilog]]] :begin [#cons-block [] [['pushq [[#reg-rand 'rbp]]] ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]] ['subq [[#imm-rand 8] [#reg-rand 'rsp]]] [#jmp 'start]]] :epilog [#cons-block [] [['addq [[#imm-rand 8] [#reg-rand 'rsp]]] ['popq [[#reg-rand 'rbp]]] #retq]]]]

