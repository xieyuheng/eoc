000 (program () (let ((x 4)) (iadd 8 x)))
010 (program () (let ((x₁ 4)) (iadd 8 x₁)))
020 (program () (let ((x₁ 4)) (iadd 8 x₁)))
030 (c-program (:ctx (:x₁ int-t)) (:start ((= x₁ 4) (return (iadd 8 x₁)))))
040 (x86-program (:ctx (:x₁ int-t)) (:start (() ((movq $4 x₁) (movq $8 %rax) (addq x₁ %rax) (jmp epilog)))))
050 (x86-program (:ctx (:x₁ int-t)) (:start (() ((movq $4 x₁) (movq $8 %rax) (addq x₁ %rax) (jmp epilog)))))
060 (x86-program (:ctx (:x₁ int-t)) (:start (() ((movq $4 (deref %rbp -8)) (movq $8 %rax) (addq (deref %rbp -8) %rax) (jmp epilog)))))
070 (x86-program (:ctx (:x₁ int-t)) (:start (() ((movq $4 (deref %rbp -8)) (movq $8 %rax) (addq (deref %rbp -8) %rax) (jmp epilog)))))
080 (x86-program (:ctx (:x₁ int-t)) (:start (() ((movq $4 (deref %rbp -8)) (movq $8 %rax) (addq (deref %rbp -8) %rax) (jmp epilog))) :begin (() ((pushq %rbp) (movq %rsp %rbp) (subq $16 %rsp) (jmp start))) :epilog (() ((addq $16 %rsp) (popq %rbp) (retq)))))
