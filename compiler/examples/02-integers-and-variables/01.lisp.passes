000 (program () (let ((x 4)) (iadd 8 x)))
010 (program () (let ((x₁ 4)) (iadd 8 x₁)))
020 (program () (let ((x₁ 4)) (iadd 8 x₁)))
030 (c-program (:ctx (:x₁ int-t)) (:start ((= x₁ 4) (return (iadd 8 x₁)))))
040 (cons-x86-program [:ctx [:x₁ int-t]] [:start (cons-block [] [['movq [(imm-rand 4) (var-rand 'x₁)]] ['movq [(imm-rand 8) (reg-rand 'rax)]] ['addq [(var-rand 'x₁) (reg-rand 'rax)]] (jmp 'epilog)])])
050 (cons-x86-program [:ctx [:x₁ int-t]] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 4) (var-rand 'x₁)]] ['movq [(imm-rand 8) (reg-rand 'rax)]] ['addq [(var-rand 'x₁) (reg-rand 'rax)]] (jmp 'epilog)])])
060 (cons-x86-program [:ctx [:x₁ int-t] :stack-space 8] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 4) (deref-rand 'rbp -8)]] ['movq [(imm-rand 8) (reg-rand 'rax)]] ['addq [(deref-rand 'rbp -8) (reg-rand 'rax)]] (jmp 'epilog)])])
070 (cons-x86-program [:ctx [:x₁ int-t] :stack-space 8] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 4) (deref-rand 'rbp -8)]] ['movq [(imm-rand 8) (reg-rand 'rax)]] ['addq [(deref-rand 'rbp -8) (reg-rand 'rax)]] (jmp 'epilog)])])
080 (cons-x86-program [:ctx [:x₁ int-t] :stack-space 8] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 4) (deref-rand 'rbp -8)]] ['movq [(imm-rand 8) (reg-rand 'rax)]] ['addq [(deref-rand 'rbp -8) (reg-rand 'rax)]] (jmp 'epilog)]) :begin (cons-block [] [['pushq [(reg-rand 'rbp)]] ['movq [(reg-rand 'rsp) (reg-rand 'rbp)]] ['subq [(imm-rand 16) (reg-rand 'rsp)]] (jmp 'start)]) :epilog (cons-block [] [['addq [(imm-rand 16) (reg-rand 'rsp)]] ['popq [(reg-rand 'rbp)]] retq])])
