mod:

  (mod () (let ((x 4)) (iadd 8 x)))

shrink:

  (mod () (let ((x 4)) (iadd 8 x)))

uniquify:

  (mod () (let ((x₁ 4)) (iadd 8 x₁)))

check-type:

  (mod () (the int-t (let ((x₁ (the int-t 4))) (the int-t (iadd (the int-t 8) (the int-t x₁))))))

remove-complex-operands:

  (mod () (the int-t (let ((x₁ (the int-t 4))) (the int-t (iadd (the int-t 8) (the int-t x₁))))))

explicate-control:

  [#cons-c-mod
   []
   [:begin
    [#cons-seq
     [#assign-stmt [#var-c-exp 'x₁] [#int-c-exp 4]]
     [#return-seq [#prim-c-exp 'iadd [[#int-c-exp 8] [#var-c-exp 'x₁]]]]]]]

select-instructions:

  [#cons-x86-mod
   [:context [:x₁ #int-type]]
   [:begin
    [#cons-block
     []
     [['movq [[#imm-rand 4] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 8] [#reg-rand 'rax]]]
      ['addq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-mod
   [:context [:x₁ #int-type]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 4] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 8] [#reg-rand 'rax]]]
      ['addq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-mod
   [:context [:x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp] {[#var-rand 'x₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#var-rand 'x₁] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 4] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 8] [#reg-rand 'rax]]]
      ['addq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-mod
   [:home-locations (@hash [#var-rand 'x₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :context [:x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp] {[#var-rand 'x₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#var-rand 'x₁] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 4] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 8] [#reg-rand 'rax]]]
      ['addq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

assign-homes:

  [#cons-x86-mod
   [:home-locations (@hash [#var-rand 'x₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :context [:x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp] {[#var-rand 'x₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#var-rand 'x₁] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 4] [#reg-rand 'rcx]]]
      ['movq [[#imm-rand 8] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-mod
   [:home-locations (@hash [#var-rand 'x₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :context [:x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp] {[#var-rand 'x₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#var-rand 'x₁] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 4] [#reg-rand 'rcx]]]
      ['movq [[#imm-rand 8] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-mod
   [:home-locations (@hash [#var-rand 'x₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :context [:x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁] [#reg-rand 'rsp] [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp] [#reg-rand 'rax]}
       [#reg-rand 'rsp] {[#var-rand 'x₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#var-rand 'x₁] [#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     []
     [['pushq [[#reg-rand 'rbp]]]
      ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]]
      [#jmp 'begin.body]]]
    :begin.body
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 4] [#reg-rand 'rcx]]]
      ['movq [[#imm-rand 8] [#reg-rand 'rax]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]
    :begin.epilog [#cons-block [] [['popq [[#reg-rand 'rbp]]] #retq]]]]

