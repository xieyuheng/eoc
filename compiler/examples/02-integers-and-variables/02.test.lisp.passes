000 (program () (let ((y (let ((x 20)) (iadd x (let ((x 22)) x))))) y))
010 (program () (let ((y₁ (let ((x₁ 20)) (iadd x₁ (let ((x₂ 22)) x₂))))) y₁))
020 (program () (let ((y₁ (let ((x₁ 20)) (let ((x₂ 22)) (iadd x₁ x₂))))) y₁))
030 (c-program (:ctx (:x₁ int-t :x₂ int-t :y₁ int-t)) (:start ((= x₁ 20) (= x₂ 22) (= y₁ (iadd x₁ x₂)) (return y₁))))
040 (x86-program (:ctx (:x₁ int-t :x₂ int-t :y₁ int-t)) (:start (() ((movq $20 x₁) (movq $22 x₂) (movq x₁ y₁) (addq x₂ y₁) (movq y₁ %rax) (jmp epilog)))))
050 (x86-program (:ctx (:x₁ int-t :x₂ int-t :y₁ int-t)) (:start (() ((movq $20 (deref %rbp -8)) (movq $22 (deref %rbp -16)) (movq (deref %rbp -8) (deref %rbp -24)) (addq (deref %rbp -16) (deref %rbp -24)) (movq (deref %rbp -24) %rax) (jmp epilog)))))
060 (x86-program (:ctx (:x₁ int-t :x₂ int-t :y₁ int-t)) (:start (() ((movq $20 (deref %rbp -8)) (movq $22 (deref %rbp -16)) (movq (deref %rbp -8) %rax) (movq %rax (deref %rbp -24)) (movq (deref %rbp -16) %rax) (addq %rax (deref %rbp -24)) (movq (deref %rbp -24) %rax) (jmp epilog)))))
070 (x86-program (:ctx (:x₁ int-t :x₂ int-t :y₁ int-t)) (:start (() ((movq $20 (deref %rbp -8)) (movq $22 (deref %rbp -16)) (movq (deref %rbp -8) %rax) (movq %rax (deref %rbp -24)) (movq (deref %rbp -16) %rax) (addq %rax (deref %rbp -24)) (movq (deref %rbp -24) %rax) (jmp epilog))) :main (() ((pushq %rbp) (movq %rsp %rbp) (subq $16 %rsp) (jmp start))) :epilog (() ((addq $16 %rsp) (popq %rbp) (retq)))))
