program:

  (program () (iadd 20 22))

uniquify:

  (program () (iadd 20 22))

remove-complex-operands:

  (program () (iadd 20 22))

explicate-control:

  (c-program () (:begin ((return (iadd 20 22)))))

select-instructions:

  [#cons-x86-program [:contexts [:begin []]] [:begin [#cons-block [] [['movq [[#imm-rand 20] [#reg-rand 'rax]]] ['addq [[#imm-rand 22] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-program [:contexts [:begin []]] [:begin [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]}] [['movq [[#imm-rand 20] [#reg-rand 'rax]]] ['addq [[#imm-rand 22] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-program [:contexts [:begin []]] [:begin [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#reg-rand 'rax] [#reg-rand 'rsp]} (@hash [#reg-rand 'rax] {[#reg-rand 'rsp]} [#reg-rand 'rsp] {[#reg-rand 'rax]})]] [['movq [[#imm-rand 20] [#reg-rand 'rax]]] ['addq [[#imm-rand 22] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-program [:contexts [:begin []] :stack-space 0] [:begin [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#reg-rand 'rax] [#reg-rand 'rsp]} (@hash [#reg-rand 'rax] {[#reg-rand 'rsp]} [#reg-rand 'rsp] {[#reg-rand 'rax]})]] [['movq [[#imm-rand 20] [#reg-rand 'rax]]] ['addq [[#imm-rand 22] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-program [:contexts [:begin []] :stack-space 0] [:begin [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#reg-rand 'rax] [#reg-rand 'rsp]} (@hash [#reg-rand 'rax] {[#reg-rand 'rsp]} [#reg-rand 'rsp] {[#reg-rand 'rax]})]] [['movq [[#imm-rand 20] [#reg-rand 'rax]]] ['addq [[#imm-rand 22] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-program [:contexts [:begin []] :stack-space 0] [:begin [#cons-block [] [['pushq [[#reg-rand 'rbp]]] ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]] [#jmp 'begin.body]]] :begin.body [#cons-block [:live-after-instrs [{[#reg-rand 'rsp]} {[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#reg-rand 'rax] [#reg-rand 'rsp]} (@hash [#reg-rand 'rax] {[#reg-rand 'rsp]} [#reg-rand 'rsp] {[#reg-rand 'rax]})]] [['movq [[#imm-rand 20] [#reg-rand 'rax]]] ['addq [[#imm-rand 22] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]] :begin.epilog [#cons-block [] [['popq [[#reg-rand 'rbp]]] #retq]]]]

