000 (program () (iadd (iadd 1 2) (iadd 3 (iadd 4 5))))
001 (program () 15)
010 (program () 15)
020 (program () 15)
030 (c-program (:ctx ()) (:start ((return 15))))
040 (cons-x86-program [:ctx []] [:start (cons-block [] [['movq [(imm-rand 15) (reg-rand 'rax)]] (jmp 'epilog)])])
050 (cons-x86-program [:ctx []] [:start (cons-block [:live-after-instrs [{(reg-rand 'rsp) (reg-rand 'rax)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(reg-rand 'rsp) (reg-rand 'rax)}] [['movq [(imm-rand 15) (reg-rand 'rax)]] (jmp 'epilog)])])
060 (cons-x86-program [:ctx [] :stack-space 0] [:start (cons-block [:live-after-instrs [{(reg-rand 'rsp) (reg-rand 'rax)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(reg-rand 'rsp) (reg-rand 'rax)}] [['movq [(imm-rand 15) (reg-rand 'rax)]] (jmp 'epilog)])])
070 (cons-x86-program [:ctx [] :stack-space 0] [:start (cons-block [:live-after-instrs [{(reg-rand 'rsp) (reg-rand 'rax)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(reg-rand 'rsp) (reg-rand 'rax)}] [['movq [(imm-rand 15) (reg-rand 'rax)]] (jmp 'epilog)])])
080 (cons-x86-program [:ctx [] :stack-space 0] [:start (cons-block [:live-after-instrs [{(reg-rand 'rsp) (reg-rand 'rax)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(reg-rand 'rsp) (reg-rand 'rax)}] [['movq [(imm-rand 15) (reg-rand 'rax)]] (jmp 'epilog)]) :begin (cons-block [] [['pushq [(reg-rand 'rbp)]] ['movq [(reg-rand 'rsp) (reg-rand 'rbp)]] ['subq [(imm-rand 16) (reg-rand 'rsp)]] (jmp 'start)]) :epilog (cons-block [] [['addq [(imm-rand 16) (reg-rand 'rsp)]] ['popq [(reg-rand 'rbp)]] retq])])
