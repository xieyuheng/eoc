program:

  (program () (iadd (iadd 1 2) (iadd 3 (iadd 4 5))))

partial-eval:

  (program () 15)

uniquify:

  (program () 15)

remove-complex-operands:

  (program () 15)

explicate-control:

  (c-program () (:begin ((return 15))))

select-instructions:

  [#cons-x86-program
   [:contexts [:begin []]]
   [:begin
    [#cons-block
     [:context []]
     [['movq [[#imm-rand 15] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-program
   [:contexts [:begin []]]
   [:begin
    [#cons-block
     [:context []
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets [{[#reg-rand 'rsp] [#reg-rand 'rax]} {}]]
     [['movq [[#imm-rand 15] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-program
   [:contexts [:begin []]]
   [:begin
    [#cons-block
     [:context []
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets [{[#reg-rand 'rsp] [#reg-rand 'rax]} {}]
      :interference-graph
      [#cons-graph
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       (@hash
         [#reg-rand 'rax] {[#reg-rand 'rsp]}
         [#reg-rand 'rsp] {[#reg-rand 'rax]})]]
     [['movq [[#imm-rand 15] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-program
   [:contexts [:begin []]]
   [:begin
    [#cons-block
     [:home-locations (@hash)
      :spill-count 0
      :callee-saved []
      :context []
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets [{[#reg-rand 'rsp] [#reg-rand 'rax]} {}]
      :interference-graph
      [#cons-graph
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       (@hash
         [#reg-rand 'rax] {[#reg-rand 'rsp]}
         [#reg-rand 'rsp] {[#reg-rand 'rax]})]]
     [['movq [[#imm-rand 15] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

assign-homes:

  [#cons-x86-program
   [:contexts [:begin []]]
   [:begin
    [#cons-block
     [:home-locations (@hash)
      :spill-count 0
      :callee-saved []
      :context []
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets [{[#reg-rand 'rsp] [#reg-rand 'rax]} {}]
      :interference-graph
      [#cons-graph
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       (@hash
         [#reg-rand 'rax] {[#reg-rand 'rsp]}
         [#reg-rand 'rsp] {[#reg-rand 'rax]})]]
     [['movq [[#imm-rand 15] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-program
   [:contexts [:begin []]]
   [:begin
    [#cons-block
     [:home-locations (@hash)
      :spill-count 0
      :callee-saved []
      :context []
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets [{[#reg-rand 'rsp] [#reg-rand 'rax]} {}]
      :interference-graph
      [#cons-graph
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       (@hash
         [#reg-rand 'rax] {[#reg-rand 'rsp]}
         [#reg-rand 'rsp] {[#reg-rand 'rax]})]]
     [['movq [[#imm-rand 15] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-program
   [:contexts [:begin []]]
   [:begin
    [#cons-block
     []
     [['pushq [[#reg-rand 'rbp]]]
      ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]]
      [#jmp 'begin.body]]]
    :begin.body
    [#cons-block
     [:home-locations (@hash)
      :spill-count 0
      :callee-saved []
      :context []
      :block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets [{[#reg-rand 'rsp] [#reg-rand 'rax]} {}]
      :interference-graph
      [#cons-graph
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       (@hash
         [#reg-rand 'rax] {[#reg-rand 'rsp]}
         [#reg-rand 'rsp] {[#reg-rand 'rax]})]]
     [['movq [[#imm-rand 15] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]
    :begin.epilog [#cons-block [] [['popq [[#reg-rand 'rbp]]] #retq]]]]

