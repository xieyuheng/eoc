000 (program () (let ((z (let ((y (let ((x 6)) x))) y))) z))
010 (program () (let ((z₁ (let ((y₁ (let ((x₁ 6)) x₁))) y₁))) z₁))
020 (program () (let ((z₁ (let ((y₁ (let ((x₁ 6)) x₁))) y₁))) z₁))
030 (c-program (:ctx (:x₁ int-t :y₁ int-t :z₁ int-t)) (:start ((= x₁ 6) (= y₁ x₁) (= z₁ y₁) (return z₁))))
040 (x86-program (:ctx (:x₁ int-t :y₁ int-t :z₁ int-t)) (:start (() ((movq $6 x₁) (movq x₁ y₁) (movq y₁ z₁) (movq z₁ %rax) (jmp epilog)))))
050 (x86-program (:ctx (:x₁ int-t :y₁ int-t :z₁ int-t)) (:start (() ((movq $6 (deref %rbp -8)) (movq (deref %rbp -8) (deref %rbp -16)) (movq (deref %rbp -16) (deref %rbp -24)) (movq (deref %rbp -24) %rax) (jmp epilog)))))
060 (x86-program (:ctx (:x₁ int-t :y₁ int-t :z₁ int-t)) (:start (() ((movq $6 (deref %rbp -8)) (movq (deref %rbp -8) %rax) (movq %rax (deref %rbp -16)) (movq (deref %rbp -16) %rax) (movq %rax (deref %rbp -24)) (movq (deref %rbp -24) %rax) (jmp epilog)))))
070 (x86-program (:ctx (:x₁ int-t :y₁ int-t :z₁ int-t)) (:start (() ((movq $6 (deref %rbp -8)) (movq (deref %rbp -8) %rax) (movq %rax (deref %rbp -16)) (movq (deref %rbp -16) %rax) (movq %rax (deref %rbp -24)) (movq (deref %rbp -24) %rax) (jmp epilog))) :main (() ((pushq %rbp) (movq %rsp %rbp) (subq $16 %rsp) (jmp start))) :epilog (() ((addq $16 %rsp) (popq %rbp) (retq)))))
