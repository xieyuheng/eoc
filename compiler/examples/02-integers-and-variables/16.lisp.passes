mod:

  (mod () (isub 50 8))

shrink:

  (mod () (isub 50 8))

uniquify:

  (mod () (isub 50 8))

check-type:

  (mod () (the int-t (isub (the int-t 50) (the int-t 8))))

remove-complex-operands:

  (mod () (the int-t (isub (the int-t 50) (the int-t 8))))

explicate-control:

  [#cons-c-mod
   []
   [:begin [#return-seq [#prim-c-exp 'isub [[#int-c-exp 50] [#int-c-exp 8]]]]]]

select-instructions:

  [#cons-x86-mod
   [:context []]
   [:begin
    [#cons-block
     []
     [['movq [[#imm-rand 50] [#reg-rand 'rax]]]
      ['subq [[#imm-rand 8] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-mod
   [:context []]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {}]]
     [['movq [[#imm-rand 50] [#reg-rand 'rax]]]
      ['subq [[#imm-rand 8] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-mod
   [:context []
    :interference-graph
    [#cons-graph
     {[#reg-rand 'rax] [#reg-rand 'rsp]}
     (@hash
       [#reg-rand 'rax] {[#reg-rand 'rsp]}
       [#reg-rand 'rsp] {[#reg-rand 'rax]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {}]]
     [['movq [[#imm-rand 50] [#reg-rand 'rax]]]
      ['subq [[#imm-rand 8] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-mod
   [:home-locations (@hash)
    :spill-count 0
    :callee-saved []
    :context []
    :interference-graph
    [#cons-graph
     {[#reg-rand 'rax] [#reg-rand 'rsp]}
     (@hash
       [#reg-rand 'rax] {[#reg-rand 'rsp]}
       [#reg-rand 'rsp] {[#reg-rand 'rax]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {}]]
     [['movq [[#imm-rand 50] [#reg-rand 'rax]]]
      ['subq [[#imm-rand 8] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

assign-homes:

  [#cons-x86-mod
   [:home-locations (@hash)
    :spill-count 0
    :callee-saved []
    :context []
    :interference-graph
    [#cons-graph
     {[#reg-rand 'rax] [#reg-rand 'rsp]}
     (@hash
       [#reg-rand 'rax] {[#reg-rand 'rsp]}
       [#reg-rand 'rsp] {[#reg-rand 'rax]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {}]]
     [['movq [[#imm-rand 50] [#reg-rand 'rax]]]
      ['subq [[#imm-rand 8] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-mod
   [:home-locations (@hash)
    :spill-count 0
    :callee-saved []
    :context []
    :interference-graph
    [#cons-graph
     {[#reg-rand 'rax] [#reg-rand 'rsp]}
     (@hash
       [#reg-rand 'rax] {[#reg-rand 'rsp]}
       [#reg-rand 'rsp] {[#reg-rand 'rax]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {}]]
     [['movq [[#imm-rand 50] [#reg-rand 'rax]]]
      ['subq [[#imm-rand 8] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-mod
   [:home-locations (@hash)
    :spill-count 0
    :callee-saved []
    :context []
    :interference-graph
    [#cons-graph
     {[#reg-rand 'rax] [#reg-rand 'rsp]}
     (@hash
       [#reg-rand 'rax] {[#reg-rand 'rsp]}
       [#reg-rand 'rsp] {[#reg-rand 'rax]})]]
   [:begin
    [#cons-block
     []
     [['pushq [[#reg-rand 'rbp]]]
      ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]]
      [#jmp 'begin.body]]]
    :begin.body
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {}]]
     [['movq [[#imm-rand 50] [#reg-rand 'rax]]]
      ['subq [[#imm-rand 8] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]
    :begin.epilog [#cons-block [] [['popq [[#reg-rand 'rbp]]] #retq]]]]

