program:

  (program () (let ((x (iadd 42 (ineg 10)))) (iadd x 10)))

uniquify:

  (program () (let ((x₁ (iadd 42 (ineg 10)))) (iadd x₁ 10)))

remove-complex-operands:

  (program () (let ((x₁ (let ((_₁ (ineg 10))) (iadd 42 _₁)))) (iadd x₁ 10)))

explicate-control:

  (c-program () (:begin ((= _₁ (ineg 10)) (= x₁ (iadd 42 _₁)) (return (iadd x₁ 10)))))

select-instructions:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t :x₁ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t :x₁ #int-t]] [['movq [[#imm-rand 10] [#var-rand '_₁]]] ['negq [[#var-rand '_₁]]] ['movq [[#imm-rand 42] [#var-rand 'x₁]]] ['addq [[#var-rand '_₁] [#var-rand 'x₁]]] ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]] ['addq [[#imm-rand 10] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t :x₁ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t :x₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]}] [['movq [[#imm-rand 10] [#var-rand '_₁]]] ['negq [[#var-rand '_₁]]] ['movq [[#imm-rand 42] [#var-rand 'x₁]]] ['addq [[#var-rand '_₁] [#var-rand 'x₁]]] ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]] ['addq [[#imm-rand 10] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t :x₁ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t :x₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand 'x₁] [#reg-rand 'rax]} (@hash [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand 'x₁]} [#reg-rand 'rsp] {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rax]} [#var-rand 'x₁] {[#var-rand '_₁] [#reg-rand 'rsp]} [#reg-rand 'rax] {[#reg-rand 'rsp]})]] [['movq [[#imm-rand 10] [#var-rand '_₁]]] ['negq [[#var-rand '_₁]]] ['movq [[#imm-rand 42] [#var-rand 'x₁]]] ['addq [[#var-rand '_₁] [#var-rand 'x₁]]] ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]] ['addq [[#imm-rand 10] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t :x₁ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t :x₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand 'x₁] [#reg-rand 'rax]} (@hash [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand 'x₁]} [#reg-rand 'rsp] {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rax]} [#var-rand 'x₁] {[#var-rand '_₁] [#reg-rand 'rsp]} [#reg-rand 'rax] {[#reg-rand 'rsp]})] :stack-space 128 :used-callee-saved-registers [[#reg-rand 'rsp] [#reg-rand 'rbp] [#reg-rand 'rbx] [#reg-rand 'r12] [#reg-rand 'r13] [#reg-rand 'r14] [#reg-rand 'r15]]] [['movq [[#imm-rand 10] [#reg-rand 'rcx]]] ['negq [[#reg-rand 'rcx]]] ['movq [[#imm-rand 42] [#reg-rand 'rdx]]] ['addq [[#reg-rand 'rcx] [#reg-rand 'rdx]]] ['movq [[#reg-rand 'rdx] [#reg-rand 'rax]]] ['addq [[#imm-rand 10] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t :x₁ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t :x₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand 'x₁] [#reg-rand 'rax]} (@hash [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand 'x₁]} [#reg-rand 'rsp] {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rax]} [#var-rand 'x₁] {[#var-rand '_₁] [#reg-rand 'rsp]} [#reg-rand 'rax] {[#reg-rand 'rsp]})] :stack-space 128 :used-callee-saved-registers [[#reg-rand 'rsp] [#reg-rand 'rbp] [#reg-rand 'rbx] [#reg-rand 'r12] [#reg-rand 'r13] [#reg-rand 'r14] [#reg-rand 'r15]]] [['movq [[#imm-rand 10] [#reg-rand 'rcx]]] ['negq [[#reg-rand 'rcx]]] ['movq [[#imm-rand 42] [#reg-rand 'rdx]]] ['addq [[#reg-rand 'rcx] [#reg-rand 'rdx]]] ['movq [[#reg-rand 'rdx] [#reg-rand 'rax]]] ['addq [[#imm-rand 10] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t :x₁ #int-t]]] [:begin [#cons-block [] [['pushq [[#reg-rand 'rbp]]] ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]] ['pushq [[#reg-rand 'rsp]]] ['pushq [[#reg-rand 'rbp]]] ['pushq [[#reg-rand 'rbx]]] ['pushq [[#reg-rand 'r12]]] ['pushq [[#reg-rand 'r13]]] ['pushq [[#reg-rand 'r14]]] ['pushq [[#reg-rand 'r15]]] ['subq [[#imm-rand 128] [#reg-rand 'rsp]]] [#jmp 'begin.body]]] :begin.body [#cons-block [:context [:_₁ #int-t :x₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rsp]} {[#var-rand 'x₁] [#reg-rand 'rsp]} {[#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand 'x₁] [#reg-rand 'rax]} (@hash [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand 'x₁]} [#reg-rand 'rsp] {[#var-rand '_₁] [#var-rand 'x₁] [#reg-rand 'rax]} [#var-rand 'x₁] {[#var-rand '_₁] [#reg-rand 'rsp]} [#reg-rand 'rax] {[#reg-rand 'rsp]})] :stack-space 128 :used-callee-saved-registers [[#reg-rand 'rsp] [#reg-rand 'rbp] [#reg-rand 'rbx] [#reg-rand 'r12] [#reg-rand 'r13] [#reg-rand 'r14] [#reg-rand 'r15]]] [['movq [[#imm-rand 10] [#reg-rand 'rcx]]] ['negq [[#reg-rand 'rcx]]] ['movq [[#imm-rand 42] [#reg-rand 'rdx]]] ['addq [[#reg-rand 'rcx] [#reg-rand 'rdx]]] ['movq [[#reg-rand 'rdx] [#reg-rand 'rax]]] ['addq [[#imm-rand 10] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]] :begin.epilog [#cons-block [] [['addq [[#imm-rand 128] [#reg-rand 'rsp]]] ['popq [[#reg-rand 'r15]]] ['popq [[#reg-rand 'r14]]] ['popq [[#reg-rand 'r13]]] ['popq [[#reg-rand 'r12]]] ['popq [[#reg-rand 'rbx]]] ['popq [[#reg-rand 'rbp]]] ['popq [[#reg-rand 'rsp]]] ['popq [[#reg-rand 'rbp]]] #retq]]]]

