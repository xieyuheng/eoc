000 (program () (let ((x 32)) (iadd (let ((x 10)) x) x)))
010 (program () (let ((x₁ 32)) (iadd (let ((x₂ 10)) x₂) x₁)))
020 (program () (let ((x₁ 32)) (let ((x₂ 10)) (iadd x₂ x₁))))
030 (c-program (:ctx (:x₁ int-t :x₂ int-t)) (:start ((= x₁ 32) (= x₂ 10) (return (iadd x₂ x₁)))))
040 (@x86-program [:ctx [:x₁ int-t :x₂ int-t]] [:start (@block [] [['movq [(imm-rand 32) (var-rand 'x₁)]] ['movq [(imm-rand 10) (var-rand 'x₂)]] ['movq [(var-rand 'x₂) (reg-rand 'rax)]] ['addq [(var-rand 'x₁) (reg-rand 'rax)]] (jmp 'epilog)])])
050 (@x86-program [:ctx [:x₁ int-t :x₂ int-t]] [:start (@block [:live-after-instrs [{(reg-rand 'rsp)} {(var-rand 'x₁) (reg-rand 'rsp)} {(var-rand 'x₂) (var-rand 'x₁) (reg-rand 'rsp)} {(var-rand 'x₁) (reg-rand 'rax) (reg-rand 'rsp)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(reg-rand 'rsp)}] [['movq [(imm-rand 32) (var-rand 'x₁)]] ['movq [(imm-rand 10) (var-rand 'x₂)]] ['movq [(var-rand 'x₂) (reg-rand 'rax)]] ['addq [(var-rand 'x₁) (reg-rand 'rax)]] (jmp 'epilog)])])
060 (@x86-program [:ctx [:x₁ int-t :x₂ int-t] :stack-space 16] [:start (@block [:live-after-instrs [{(reg-rand 'rsp)} {(var-rand 'x₁) (reg-rand 'rsp)} {(var-rand 'x₂) (var-rand 'x₁) (reg-rand 'rsp)} {(var-rand 'x₁) (reg-rand 'rax) (reg-rand 'rsp)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(reg-rand 'rsp)}] [['movq [(imm-rand 32) (deref-rand 'rbp -8)]] ['movq [(imm-rand 10) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] ['addq [(deref-rand 'rbp -8) (reg-rand 'rax)]] (jmp 'epilog)])])
070 (@x86-program [:ctx [:x₁ int-t :x₂ int-t] :stack-space 16] [:start (@block [:live-after-instrs [{(reg-rand 'rsp)} {(var-rand 'x₁) (reg-rand 'rsp)} {(var-rand 'x₂) (var-rand 'x₁) (reg-rand 'rsp)} {(var-rand 'x₁) (reg-rand 'rax) (reg-rand 'rsp)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(reg-rand 'rsp)}] [['movq [(imm-rand 32) (deref-rand 'rbp -8)]] ['movq [(imm-rand 10) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] ['addq [(deref-rand 'rbp -8) (reg-rand 'rax)]] (jmp 'epilog)])])
080 (@x86-program [:ctx [:x₁ int-t :x₂ int-t] :stack-space 16] [:start (@block [:live-after-instrs [{(reg-rand 'rsp)} {(var-rand 'x₁) (reg-rand 'rsp)} {(var-rand 'x₂) (var-rand 'x₁) (reg-rand 'rsp)} {(var-rand 'x₁) (reg-rand 'rax) (reg-rand 'rsp)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(reg-rand 'rsp)}] [['movq [(imm-rand 32) (deref-rand 'rbp -8)]] ['movq [(imm-rand 10) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] ['addq [(deref-rand 'rbp -8) (reg-rand 'rax)]] (jmp 'epilog)]) :begin (@block [] [['pushq [(reg-rand 'rbp)]] ['movq [(reg-rand 'rsp) (reg-rand 'rbp)]] ['subq [(imm-rand 16) (reg-rand 'rsp)]] (jmp 'start)]) :epilog (@block [] [['addq [(imm-rand 16) (reg-rand 'rsp)]] ['popq [(reg-rand 'rbp)]] retq])])
