000 (program () (let ((x 32)) (iadd (let ((x 10)) x) x)))
010 (program () (let ((x₁ 32)) (iadd (let ((x₂ 10)) x₂) x₁)))
020 (program () (let ((x₁ 32)) (let ((x₂ 10)) (iadd x₂ x₁))))
030 (c-program (:ctx (:x₁ int-t :x₂ int-t)) (:start ((= x₁ 32) (= x₂ 10) (return (iadd x₂ x₁)))))
040 (x86-program (:ctx (:x₁ int-t :x₂ int-t)) (:start (() ((movq $32 x₁) (movq $10 x₂) (movq x₂ %rax) (addq x₁ %rax) (jmp epilog)))))
050 (x86-program (:ctx (:x₁ int-t :x₂ int-t)) (:start (() ((movq $32 (deref %rbp -8)) (movq $10 (deref %rbp -16)) (movq (deref %rbp -16) %rax) (addq (deref %rbp -8) %rax) (jmp epilog)))))
060 (x86-program (:ctx (:x₁ int-t :x₂ int-t)) (:start (() ((movq $32 (deref %rbp -8)) (movq $10 (deref %rbp -16)) (movq (deref %rbp -16) %rax) (addq (deref %rbp -8) %rax) (jmp epilog)))))
070 (x86-program (:ctx (:x₁ int-t :x₂ int-t)) (:start (() ((movq $32 (deref %rbp -8)) (movq $10 (deref %rbp -16)) (movq (deref %rbp -16) %rax) (addq (deref %rbp -8) %rax) (jmp epilog))) :begin (() ((pushq %rbp) (movq %rsp %rbp) (subq $16 %rsp) (jmp start))) :epilog (() ((addq $16 %rsp) (popq %rbp) (retq)))))
