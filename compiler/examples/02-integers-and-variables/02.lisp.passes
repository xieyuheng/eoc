mod:

  (mod () (let ((y (let ((x 20)) (iadd x (let ((x 22)) x))))) y))

shrink:

  (mod () (let ((y (let ((x 20)) (iadd x (let ((x 22)) x))))) y))

uniquify:

  (mod () (let ((y₁ (let ((x₁ 20)) (iadd x₁ (let ((x₂ 22)) x₂))))) y₁))

remove-complex-operands:

  (mod () (let ((y₁ (let ((x₁ 20)) (let ((x₂ 22)) (iadd x₁ x₂))))) y₁))

explicate-control:

  [#cons-c-mod
   []
   [:begin
    [#cons-seq
     [#assign-stmt [#var-c-exp 'x₁] [#int-c-exp 20]]
     [#cons-seq
      [#assign-stmt [#var-c-exp 'x₂] [#int-c-exp 22]]
      [#cons-seq
       [#assign-stmt
        [#var-c-exp 'y₁]
        [#prim-c-exp 'iadd [[#var-c-exp 'x₁] [#var-c-exp 'x₂]]]]
       [#return-seq [#var-c-exp 'y₁]]]]]]]

select-instructions:

  [#cons-x86-mod
   [:context [:x₁ #int-type :x₂ #int-type :y₁ #int-type]]
   [:begin
    [#cons-block
     []
     [['movq [[#imm-rand 20] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 22] [#var-rand 'x₂]]]
      ['movq [[#var-rand 'x₁] [#var-rand 'y₁]]]
      ['addq [[#var-rand 'x₂] [#var-rand 'y₁]]]
      ['movq [[#var-rand 'y₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-mod
   [:context [:x₁ #int-type :x₂ #int-type :y₁ #int-type]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand 'x₂] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 20] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 22] [#var-rand 'x₂]]]
      ['movq [[#var-rand 'x₁] [#var-rand 'y₁]]]
      ['addq [[#var-rand 'x₂] [#var-rand 'y₁]]]
      ['movq [[#var-rand 'y₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-mod
   [:context [:x₁ #int-type :x₂ #int-type :y₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'x₂]
      [#var-rand 'y₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp] [#var-rand 'x₂]}
       [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp] [#var-rand 'y₁]}
       [#var-rand 'y₁] {[#var-rand 'x₂] [#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁] [#var-rand 'x₂] [#var-rand 'y₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand 'x₂] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 20] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 22] [#var-rand 'x₂]]]
      ['movq [[#var-rand 'x₁] [#var-rand 'y₁]]]
      ['addq [[#var-rand 'x₂] [#var-rand 'y₁]]]
      ['movq [[#var-rand 'y₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-mod
   [:home-locations
    (@hash
      [#var-rand 'x₂] [#reg-rand 'rcx]
      [#var-rand 'x₁] [#reg-rand 'rbx]
      [#var-rand 'y₁] [#reg-rand 'rbx])
    :spill-count 0
    :callee-saved [[#reg-rand 'rbx]]
    :context [:x₁ #int-type :x₂ #int-type :y₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'x₂]
      [#var-rand 'y₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp] [#var-rand 'x₂]}
       [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp] [#var-rand 'y₁]}
       [#var-rand 'y₁] {[#var-rand 'x₂] [#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁] [#var-rand 'x₂] [#var-rand 'y₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand 'x₂] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 20] [#var-rand 'x₁]]]
      ['movq [[#imm-rand 22] [#var-rand 'x₂]]]
      ['movq [[#var-rand 'x₁] [#var-rand 'y₁]]]
      ['addq [[#var-rand 'x₂] [#var-rand 'y₁]]]
      ['movq [[#var-rand 'y₁] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

assign-homes:

  [#cons-x86-mod
   [:home-locations
    (@hash
      [#var-rand 'x₂] [#reg-rand 'rcx]
      [#var-rand 'x₁] [#reg-rand 'rbx]
      [#var-rand 'y₁] [#reg-rand 'rbx])
    :spill-count 0
    :callee-saved [[#reg-rand 'rbx]]
    :context [:x₁ #int-type :x₂ #int-type :y₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'x₂]
      [#var-rand 'y₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp] [#var-rand 'x₂]}
       [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp] [#var-rand 'y₁]}
       [#var-rand 'y₁] {[#var-rand 'x₂] [#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁] [#var-rand 'x₂] [#var-rand 'y₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand 'x₂] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 20] [#reg-rand 'rbx]]]
      ['movq [[#imm-rand 22] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rbx]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rbx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-mod
   [:home-locations
    (@hash
      [#var-rand 'x₂] [#reg-rand 'rcx]
      [#var-rand 'x₁] [#reg-rand 'rbx]
      [#var-rand 'y₁] [#reg-rand 'rbx])
    :spill-count 0
    :callee-saved [[#reg-rand 'rbx]]
    :context [:x₁ #int-type :x₂ #int-type :y₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'x₂]
      [#var-rand 'y₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp] [#var-rand 'x₂]}
       [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp] [#var-rand 'y₁]}
       [#var-rand 'y₁] {[#var-rand 'x₂] [#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁] [#var-rand 'x₂] [#var-rand 'y₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand 'x₂] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 20] [#reg-rand 'rbx]]]
      ['movq [[#imm-rand 22] [#reg-rand 'rcx]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rbx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-mod
   [:home-locations
    (@hash
      [#var-rand 'x₂] [#reg-rand 'rcx]
      [#var-rand 'x₁] [#reg-rand 'rbx]
      [#var-rand 'y₁] [#reg-rand 'rbx])
    :spill-count 0
    :callee-saved [[#reg-rand 'rbx]]
    :context [:x₁ #int-type :x₂ #int-type :y₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'x₂]
      [#var-rand 'y₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp] [#var-rand 'x₂]}
       [#var-rand 'x₂] {[#var-rand 'x₁] [#reg-rand 'rsp] [#var-rand 'y₁]}
       [#var-rand 'y₁] {[#var-rand 'x₂] [#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁] [#var-rand 'x₂] [#var-rand 'y₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     []
     [['pushq [[#reg-rand 'rbp]]]
      ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]]
      ['pushq [[#reg-rand 'rbx]]]
      ['subq [[#imm-rand 8] [#reg-rand 'rsp]]]
      [#jmp 'begin.body]]]
    :begin.body
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#var-rand 'x₂] [#reg-rand 'rsp]}
       {[#var-rand 'x₂] [#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 20] [#reg-rand 'rbx]]]
      ['movq [[#imm-rand 22] [#reg-rand 'rcx]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rbx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]
    :begin.epilog
    [#cons-block
     []
     [['addq [[#imm-rand 8] [#reg-rand 'rsp]]]
      ['popq [[#reg-rand 'rbx]]]
      ['popq [[#reg-rand 'rbp]]]
      #retq]]]]

