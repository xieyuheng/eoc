000 (program () (let ((a 42)) (let ((b a)) b)))
010 (program () (let ((a₁ 42)) (let ((b₁ a₁)) b₁)))
020 (program () (let ((a₁ 42)) (let ((b₁ a₁)) b₁)))
030 (c-program (:ctx (:a₁ int-t :b₁ int-t)) (:start ((= a₁ 42) (= b₁ a₁) (return b₁))))
040 (x86-program (:ctx (:a₁ int-t :b₁ int-t)) (:start (() ("movq $42, a₁" "movq a₁, b₁" "movq b₁, %rax" "jmp epilog"))))
050 (x86-program (:ctx (:a₁ int-t :b₁ int-t)) (:start (() ("movq $42, -8(%rbp)" "movq -8(%rbp), -16(%rbp)" "movq -16(%rbp), %rax" "jmp epilog"))))
060 (x86-program (:ctx (:a₁ int-t :b₁ int-t)) (:start (() ("movq $42, -8(%rbp)" "movq -8(%rbp), %rax" "movq %rax, -16(%rbp)" "movq -16(%rbp), %rax" "jmp epilog"))))
070 (x86-program (:ctx (:a₁ int-t :b₁ int-t)) (:start (() ("movq $42, -8(%rbp)" "movq -8(%rbp), %rax" "movq %rax, -16(%rbp)" "movq -16(%rbp), %rax" "jmp epilog")) :main (() ("pushq %rbp" "movq %rsp, %rbp" "subq $16, %rsp" "jmp start")) :epilog (() ("addq $16, %rsp" "popq %rbp" "retq"))))
