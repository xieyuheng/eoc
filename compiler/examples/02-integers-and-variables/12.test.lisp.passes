000 (program () (iadd (iadd 1 2) (iadd 3 (iadd 4 5))))
010 (program () (iadd (iadd 1 2) (iadd 3 (iadd 4 5))))
020 (program () (let ((_₂ (iadd 4 5))) (let ((_₃ (iadd 3 _₂))) (let ((_₁ (iadd 1 2))) (iadd _₁ _₃)))))
030 (c-program (:ctx (:_₂ int-t :_₃ int-t :_₁ int-t)) (:start ((= _₂ (iadd 4 5)) (= _₃ (iadd 3 _₂)) (= _₁ (iadd 1 2)) (return (iadd _₁ _₃)))))
040 (x86-program (:ctx (:_₂ int-t :_₃ int-t :_₁ int-t)) (:start (() ("movq $4, _₂" "addq $5, _₂" "movq $3, _₃" "addq _₂, _₃" "movq $1, _₁" "addq $2, _₁" "movq _₁, %rax" "addq _₃, %rax" "jmp epilog"))))
050 (x86-program (:ctx (:_₂ int-t :_₃ int-t :_₁ int-t)) (:start (() ("movq $4, -8(%rbp)" "addq $5, -8(%rbp)" "movq $3, -16(%rbp)" "addq -8(%rbp), -16(%rbp)" "movq $1, -24(%rbp)" "addq $2, -24(%rbp)" "movq -24(%rbp), %rax" "addq -16(%rbp), %rax" "jmp epilog"))))
060 (x86-program (:ctx (:_₂ int-t :_₃ int-t :_₁ int-t)) (:start (() ("movq $4, -8(%rbp)" "addq $5, -8(%rbp)" "movq $3, -16(%rbp)" "movq -8(%rbp), %rax" "addq %rax, -16(%rbp)" "movq $1, -24(%rbp)" "addq $2, -24(%rbp)" "movq -24(%rbp), %rax" "addq -16(%rbp), %rax" "jmp epilog"))))
070 (x86-program (:ctx (:_₂ int-t :_₃ int-t :_₁ int-t)) (:start (() ("movq $4, -8(%rbp)" "addq $5, -8(%rbp)" "movq $3, -16(%rbp)" "movq -8(%rbp), %rax" "addq %rax, -16(%rbp)" "movq $1, -24(%rbp)" "addq $2, -24(%rbp)" "movq -24(%rbp), %rax" "addq -16(%rbp), %rax" "jmp epilog")) :main (() ("pushq %rbp" "movq %rsp, %rbp" "subq $16, %rsp" "jmp start")) :epilog (() ("addq $16, %rsp" "popq %rbp" "retq"))))
