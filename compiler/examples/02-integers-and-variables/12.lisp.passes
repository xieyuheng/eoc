000 (program () (iadd (iadd 1 2) (iadd 3 (iadd 4 5))))
010 (program () (iadd (iadd 1 2) (iadd 3 (iadd 4 5))))
020 (program () (let ((_₂ (iadd 4 5))) (let ((_₃ (iadd 3 _₂))) (let ((_₁ (iadd 1 2))) (iadd _₁ _₃)))))
030 (c-program (:ctx (:_₂ int-t :_₃ int-t :_₁ int-t)) (:start ((= _₂ (iadd 4 5)) (= _₃ (iadd 3 _₂)) (= _₁ (iadd 1 2)) (return (iadd _₁ _₃)))))
040 (x86-program (:ctx (:_₂ int-t :_₃ int-t :_₁ int-t)) (:start (() ((movq $4 _₂) (addq $5 _₂) (movq $3 _₃) (addq _₂ _₃) (movq $1 _₁) (addq $2 _₁) (movq _₁ %rax) (addq _₃ %rax) (jmp epilog)))))
050 (x86-program (:ctx (:_₂ int-t :_₃ int-t :_₁ int-t)) (:start (() ((movq $4 _₂) (addq $5 _₂) (movq $3 _₃) (addq _₂ _₃) (movq $1 _₁) (addq $2 _₁) (movq _₁ %rax) (addq _₃ %rax) (jmp epilog)))))
060 (x86-program (:ctx (:_₂ int-t :_₃ int-t :_₁ int-t)) (:start (() ((movq $4 (deref %rbp -8)) (addq $5 (deref %rbp -8)) (movq $3 (deref %rbp -16)) (addq (deref %rbp -8) (deref %rbp -16)) (movq $1 (deref %rbp -24)) (addq $2 (deref %rbp -24)) (movq (deref %rbp -24) %rax) (addq (deref %rbp -16) %rax) (jmp epilog)))))
070 (x86-program (:ctx (:_₂ int-t :_₃ int-t :_₁ int-t)) (:start (() ((movq $4 (deref %rbp -8)) (addq $5 (deref %rbp -8)) (movq $3 (deref %rbp -16)) (movq (deref %rbp -8) %rax) (addq %rax (deref %rbp -16)) (movq $1 (deref %rbp -24)) (addq $2 (deref %rbp -24)) (movq (deref %rbp -24) %rax) (addq (deref %rbp -16) %rax) (jmp epilog)))))
080 (x86-program (:ctx (:_₂ int-t :_₃ int-t :_₁ int-t)) (:start (() ((movq $4 (deref %rbp -8)) (addq $5 (deref %rbp -8)) (movq $3 (deref %rbp -16)) (movq (deref %rbp -8) %rax) (addq %rax (deref %rbp -16)) (movq $1 (deref %rbp -24)) (addq $2 (deref %rbp -24)) (movq (deref %rbp -24) %rax) (addq (deref %rbp -16) %rax) (jmp epilog))) :begin (() ((pushq %rbp) (movq %rsp %rbp) (subq $16 %rsp) (jmp start))) :epilog (() ((addq $16 %rsp) (popq %rbp) (retq)))))
