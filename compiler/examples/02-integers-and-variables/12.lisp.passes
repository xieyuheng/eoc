000 (program () (iadd (iadd 1 2) (iadd 3 (iadd 4 5))))
010 (program () (iadd (iadd 1 2) (iadd 3 (iadd 4 5))))
020 (program () (let ((_₁ (iadd 1 2))) (let ((_₂ (iadd 4 5))) (let ((_₃ (iadd 3 _₂))) (iadd _₁ _₃)))))
030 (c-program () (:start ((= _₁ (iadd 1 2)) (= _₂ (iadd 4 5)) (= _₃ (iadd 3 _₂)) (return (iadd _₁ _₃)))))
040 (@x86-program [:ctx [:_₁ int-t :_₂ int-t :_₃ int-t]] [:start (@block [] [['movq [(imm-rand 1) (var-rand '_₁)]] ['addq [(imm-rand 2) (var-rand '_₁)]] ['movq [(imm-rand 4) (var-rand '_₂)]] ['addq [(imm-rand 5) (var-rand '_₂)]] ['movq [(imm-rand 3) (var-rand '_₃)]] ['addq [(var-rand '_₂) (var-rand '_₃)]] ['movq [(var-rand '_₁) (reg-rand 'rax)]] ['addq [(var-rand '_₃) (reg-rand 'rax)]] (jmp 'epilog)])])
050 (@x86-program [:ctx [:_₁ int-t :_₂ int-t :_₃ int-t]] [:start (@block [:live-after-instrs [{(reg-rand 'rsp)} {(var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₂) (var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₂) (var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₂) (var-rand '_₃) (var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₁) (var-rand '_₃) (reg-rand 'rsp)} {(var-rand '_₃) (reg-rand 'rax) (reg-rand 'rsp)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(reg-rand 'rsp)}] [['movq [(imm-rand 1) (var-rand '_₁)]] ['addq [(imm-rand 2) (var-rand '_₁)]] ['movq [(imm-rand 4) (var-rand '_₂)]] ['addq [(imm-rand 5) (var-rand '_₂)]] ['movq [(imm-rand 3) (var-rand '_₃)]] ['addq [(var-rand '_₂) (var-rand '_₃)]] ['movq [(var-rand '_₁) (reg-rand 'rax)]] ['addq [(var-rand '_₃) (reg-rand 'rax)]] (jmp 'epilog)])])
060 (@x86-program [:ctx [:_₁ int-t :_₂ int-t :_₃ int-t] :stack-space 24] [:start (@block [:live-after-instrs [{(reg-rand 'rsp)} {(var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₂) (var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₂) (var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₂) (var-rand '_₃) (var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₁) (var-rand '_₃) (reg-rand 'rsp)} {(var-rand '_₃) (reg-rand 'rax) (reg-rand 'rsp)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(reg-rand 'rsp)}] [['movq [(imm-rand 1) (deref-rand 'rbp -8)]] ['addq [(imm-rand 2) (deref-rand 'rbp -8)]] ['movq [(imm-rand 4) (deref-rand 'rbp -16)]] ['addq [(imm-rand 5) (deref-rand 'rbp -16)]] ['movq [(imm-rand 3) (deref-rand 'rbp -24)]] ['addq [(deref-rand 'rbp -16) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -8) (reg-rand 'rax)]] ['addq [(deref-rand 'rbp -24) (reg-rand 'rax)]] (jmp 'epilog)])])
070 (@x86-program [:ctx [:_₁ int-t :_₂ int-t :_₃ int-t] :stack-space 24] [:start (@block [:live-after-instrs [{(reg-rand 'rsp)} {(var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₂) (var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₂) (var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₂) (var-rand '_₃) (var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₁) (var-rand '_₃) (reg-rand 'rsp)} {(var-rand '_₃) (reg-rand 'rax) (reg-rand 'rsp)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(reg-rand 'rsp)}] [['movq [(imm-rand 1) (deref-rand 'rbp -8)]] ['addq [(imm-rand 2) (deref-rand 'rbp -8)]] ['movq [(imm-rand 4) (deref-rand 'rbp -16)]] ['addq [(imm-rand 5) (deref-rand 'rbp -16)]] ['movq [(imm-rand 3) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] ['addq [(reg-rand 'rax) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -8) (reg-rand 'rax)]] ['addq [(deref-rand 'rbp -24) (reg-rand 'rax)]] (jmp 'epilog)])])
080 (@x86-program [:ctx [:_₁ int-t :_₂ int-t :_₃ int-t] :stack-space 24] [:start (@block [:live-after-instrs [{(reg-rand 'rsp)} {(var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₂) (var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₂) (var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₂) (var-rand '_₃) (var-rand '_₁) (reg-rand 'rsp)} {(var-rand '_₁) (var-rand '_₃) (reg-rand 'rsp)} {(var-rand '_₃) (reg-rand 'rax) (reg-rand 'rsp)} {(reg-rand 'rsp) (reg-rand 'rax)} {} {}] :live-before-block {(reg-rand 'rsp)}] [['movq [(imm-rand 1) (deref-rand 'rbp -8)]] ['addq [(imm-rand 2) (deref-rand 'rbp -8)]] ['movq [(imm-rand 4) (deref-rand 'rbp -16)]] ['addq [(imm-rand 5) (deref-rand 'rbp -16)]] ['movq [(imm-rand 3) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] ['addq [(reg-rand 'rax) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -8) (reg-rand 'rax)]] ['addq [(deref-rand 'rbp -24) (reg-rand 'rax)]] (jmp 'epilog)]) :begin (@block [] [['pushq [(reg-rand 'rbp)]] ['movq [(reg-rand 'rsp) (reg-rand 'rbp)]] ['subq [(imm-rand 16) (reg-rand 'rsp)]] (jmp 'start)]) :epilog (@block [] [['addq [(imm-rand 16) (reg-rand 'rsp)]] ['popq [(reg-rand 'rbp)]] retq])])
