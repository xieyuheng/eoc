program:

  (program () (let ((a 42)) (let ((b a)) b)))

uniquify:

  (program () (let ((a₁ 42)) (let ((b₁ a₁)) b₁)))

remove-complex-operands:

  (program () (let ((a₁ 42)) (let ((b₁ a₁)) b₁)))

explicate-control:

  (c-program () (:begin ((= a₁ 42) (= b₁ a₁) (return b₁))))

select-instructions:

  [#cons-x86-program [:contexts [:begin [:a₁ #int-t :b₁ #int-t]]] [:begin [#cons-block [:context [:a₁ #int-t :b₁ #int-t]] [['movq [[#imm-rand 42] [#var-rand 'a₁]]] ['movq [[#var-rand 'a₁] [#var-rand 'b₁]]] ['movq [[#var-rand 'b₁] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-program [:contexts [:begin [:a₁ #int-t :b₁ #int-t]]] [:begin [#cons-block [:context [:a₁ #int-t :b₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'a₁] [#reg-rand 'rsp]} {[#var-rand 'b₁] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]}] [['movq [[#imm-rand 42] [#var-rand 'a₁]]] ['movq [[#var-rand 'a₁] [#var-rand 'b₁]]] ['movq [[#var-rand 'b₁] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-program [:contexts [:begin [:a₁ #int-t :b₁ #int-t]]] [:begin [#cons-block [:context [:a₁ #int-t :b₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'a₁] [#reg-rand 'rsp]} {[#var-rand 'b₁] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'a₁] [#reg-rand 'rsp] [#var-rand 'b₁] [#reg-rand 'rax]} (@hash [#var-rand 'a₁] {[#reg-rand 'rsp]} [#reg-rand 'rsp] {[#var-rand 'a₁] [#var-rand 'b₁] [#reg-rand 'rax]} [#var-rand 'b₁] {[#reg-rand 'rsp]} [#reg-rand 'rax] {[#reg-rand 'rsp]})]] [['movq [[#imm-rand 42] [#var-rand 'a₁]]] ['movq [[#var-rand 'a₁] [#var-rand 'b₁]]] ['movq [[#var-rand 'b₁] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-program [:contexts [:begin [:a₁ #int-t :b₁ #int-t]]] [:begin [#cons-block [:context [:a₁ #int-t :b₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'a₁] [#reg-rand 'rsp]} {[#var-rand 'b₁] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'a₁] [#reg-rand 'rsp] [#var-rand 'b₁] [#reg-rand 'rax]} (@hash [#var-rand 'a₁] {[#reg-rand 'rsp]} [#reg-rand 'rsp] {[#var-rand 'a₁] [#var-rand 'b₁] [#reg-rand 'rax]} [#var-rand 'b₁] {[#reg-rand 'rsp]} [#reg-rand 'rax] {[#reg-rand 'rsp]})] :spilled-variable-count 0 :used-callee-saved-registers []] [['movq [[#imm-rand 42] [#reg-rand 'rcx]]] ['movq [[#reg-rand 'rcx] [#reg-rand 'rcx]]] ['movq [[#reg-rand 'rcx] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-program [:contexts [:begin [:a₁ #int-t :b₁ #int-t]]] [:begin [#cons-block [:context [:a₁ #int-t :b₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'a₁] [#reg-rand 'rsp]} {[#var-rand 'b₁] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'a₁] [#reg-rand 'rsp] [#var-rand 'b₁] [#reg-rand 'rax]} (@hash [#var-rand 'a₁] {[#reg-rand 'rsp]} [#reg-rand 'rsp] {[#var-rand 'a₁] [#var-rand 'b₁] [#reg-rand 'rax]} [#var-rand 'b₁] {[#reg-rand 'rsp]} [#reg-rand 'rax] {[#reg-rand 'rsp]})] :spilled-variable-count 0 :used-callee-saved-registers []] [['movq [[#imm-rand 42] [#reg-rand 'rcx]]] ['movq [[#reg-rand 'rcx] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-program [:contexts [:begin [:a₁ #int-t :b₁ #int-t]]] [:begin [#cons-block [] [['pushq [[#reg-rand 'rbp]]] ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]] [#jmp 'begin.body]]] :begin.body [#cons-block [:context [:a₁ #int-t :b₁ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand 'a₁] [#reg-rand 'rsp]} {[#var-rand 'b₁] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand 'a₁] [#reg-rand 'rsp] [#var-rand 'b₁] [#reg-rand 'rax]} (@hash [#var-rand 'a₁] {[#reg-rand 'rsp]} [#reg-rand 'rsp] {[#var-rand 'a₁] [#var-rand 'b₁] [#reg-rand 'rax]} [#var-rand 'b₁] {[#reg-rand 'rsp]} [#reg-rand 'rax] {[#reg-rand 'rsp]})] :spilled-variable-count 0 :used-callee-saved-registers []] [['movq [[#imm-rand 42] [#reg-rand 'rcx]]] ['movq [[#reg-rand 'rcx] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]] :begin.epilog [#cons-block [] [['popq [[#reg-rand 'rbp]]] #retq]]]]

