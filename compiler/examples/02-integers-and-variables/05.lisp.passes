000 (program () (let ((a 42)) (let ((b a)) b)))
010 (program () (let ((a₁ 42)) (let ((b₁ a₁)) b₁)))
020 (program () (let ((a₁ 42)) (let ((b₁ a₁)) b₁)))
030 (c-program (:ctx (:a₁ int-t :b₁ int-t)) (:start ((= a₁ 42) (= b₁ a₁) (return b₁))))
040 (cons-x86-program [:ctx [:a₁ int-t :b₁ int-t]] [:start (cons-block [] [['movq [(imm-rand 42) (var-rand 'a₁)]] ['movq [(var-rand 'a₁) (var-rand 'b₁)]] ['movq [(var-rand 'b₁) (reg-rand 'rax)]] (jmp 'epilog)])])
050 (cons-x86-program [:ctx [:a₁ int-t :b₁ int-t]] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 42) (var-rand 'a₁)]] ['movq [(var-rand 'a₁) (var-rand 'b₁)]] ['movq [(var-rand 'b₁) (reg-rand 'rax)]] (jmp 'epilog)])])
060 (cons-x86-program [:ctx [:a₁ int-t :b₁ int-t] :stack-space 16] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 42) (deref-rand 'rbp -8)]] ['movq [(deref-rand 'rbp -8) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] (jmp 'epilog)])])
070 (cons-x86-program [:ctx [:a₁ int-t :b₁ int-t] :stack-space 16] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 42) (deref-rand 'rbp -8)]] ['movq [(deref-rand 'rbp -8) (reg-rand 'rax)]] ['movq [(reg-rand 'rax) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] (jmp 'epilog)])])
080 (cons-x86-program [:ctx [:a₁ int-t :b₁ int-t] :stack-space 16] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 42) (deref-rand 'rbp -8)]] ['movq [(deref-rand 'rbp -8) (reg-rand 'rax)]] ['movq [(reg-rand 'rax) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] (jmp 'epilog)]) :begin (cons-block [] [['pushq [(reg-rand 'rbp)]] ['movq [(reg-rand 'rsp) (reg-rand 'rbp)]] ['subq [(imm-rand 16) (reg-rand 'rsp)]] (jmp 'start)]) :epilog (cons-block [] [['addq [(imm-rand 16) (reg-rand 'rsp)]] ['popq [(reg-rand 'rbp)]] retq])])
