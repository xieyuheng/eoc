000 (program () (iadd (random-dice) (random-dice)))
010 (program () (iadd (random-dice) (random-dice)))
020 (program () (let ((_₂ (random-dice))) (let ((_₁ (random-dice))) (iadd _₁ _₂))))
030 (c-program (:ctx (:_₂ int-t :_₁ int-t)) (:start ((= _₂ (random-dice)) (= _₁ (random-dice)) (return (iadd _₁ _₂)))))
040 (x86-program (:ctx (:_₂ int-t :_₁ int-t)) (:start (() ("callq random_dice, 0" "movq %rax, _₂" "callq random_dice, 0" "movq %rax, _₁" "movq _₁, %rax" "addq _₂, %rax" "jmp epilog"))))
050 (x86-program (:ctx (:_₂ int-t :_₁ int-t)) (:start (() ("callq random_dice, 0" "movq %rax, -8(%rbp)" "callq random_dice, 0" "movq %rax, -16(%rbp)" "movq -16(%rbp), %rax" "addq -8(%rbp), %rax" "jmp epilog"))))
060 (x86-program (:ctx (:_₂ int-t :_₁ int-t)) (:start (() ("callq random_dice, 0" "movq %rax, -8(%rbp)" "callq random_dice, 0" "movq %rax, -16(%rbp)" "movq -16(%rbp), %rax" "addq -8(%rbp), %rax" "jmp epilog"))))
070 (x86-program (:ctx (:_₂ int-t :_₁ int-t)) (:start (() ("callq random_dice, 0" "movq %rax, -8(%rbp)" "callq random_dice, 0" "movq %rax, -16(%rbp)" "movq -16(%rbp), %rax" "addq -8(%rbp), %rax" "jmp epilog")) :main (() ("pushq %rbp" "movq %rsp, %rbp" "subq $16, %rsp" "jmp start")) :epilog (() ("addq $16, %rsp" "popq %rbp" "retq"))))
