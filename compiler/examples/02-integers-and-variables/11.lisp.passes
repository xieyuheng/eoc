program:

  (program () (iadd (iadd 1 2) (iadd 3 4)))

uniquify:

  (program () (iadd (iadd 1 2) (iadd 3 4)))

remove-complex-operands:

  (program () (let ((_₁ (iadd 1 2))) (let ((_₂ (iadd 3 4))) (iadd _₁ _₂))))

explicate-control:

  (c-program () (:begin ((= _₁ (iadd 1 2)) (= _₂ (iadd 3 4)) (return (iadd _₁ _₂)))))

select-instructions:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t :_₂ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t :_₂ #int-t]] [['movq [[#imm-rand 1] [#var-rand '_₁]]] ['addq [[#imm-rand 2] [#var-rand '_₁]]] ['movq [[#imm-rand 3] [#var-rand '_₂]]] ['addq [[#imm-rand 4] [#var-rand '_₂]]] ['movq [[#var-rand '_₁] [#reg-rand 'rax]]] ['addq [[#var-rand '_₂] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t :_₂ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t :_₂ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₂] [#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rsp]} {[#var-rand '_₂] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]}] [['movq [[#imm-rand 1] [#var-rand '_₁]]] ['addq [[#imm-rand 2] [#var-rand '_₁]]] ['movq [[#imm-rand 3] [#var-rand '_₂]]] ['addq [[#imm-rand 4] [#var-rand '_₂]]] ['movq [[#var-rand '_₁] [#reg-rand 'rax]]] ['addq [[#var-rand '_₂] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t :_₂ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t :_₂ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₂] [#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rsp]} {[#var-rand '_₂] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand '_₂] [#reg-rand 'rax]} (@hash [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand '_₂]} [#reg-rand 'rsp] {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rax]} [#var-rand '_₂] {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand '_₂] [#reg-rand 'rsp]})]] [['movq [[#imm-rand 1] [#var-rand '_₁]]] ['addq [[#imm-rand 2] [#var-rand '_₁]]] ['movq [[#imm-rand 3] [#var-rand '_₂]]] ['addq [[#imm-rand 4] [#var-rand '_₂]]] ['movq [[#var-rand '_₁] [#reg-rand 'rax]]] ['addq [[#var-rand '_₂] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t :_₂ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t :_₂ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₂] [#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rsp]} {[#var-rand '_₂] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand '_₂] [#reg-rand 'rax]} (@hash [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand '_₂]} [#reg-rand 'rsp] {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rax]} [#var-rand '_₂] {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand '_₂] [#reg-rand 'rsp]})] :spilled-variable-count 0 :used-callee-saved-registers []] [['movq [[#imm-rand 1] [#reg-rand 'rdx]]] ['addq [[#imm-rand 2] [#reg-rand 'rdx]]] ['movq [[#imm-rand 3] [#reg-rand 'rcx]]] ['addq [[#imm-rand 4] [#reg-rand 'rcx]]] ['movq [[#reg-rand 'rdx] [#reg-rand 'rax]]] ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t :_₂ #int-t]]] [:begin [#cons-block [:context [:_₁ #int-t :_₂ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₂] [#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rsp]} {[#var-rand '_₂] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand '_₂] [#reg-rand 'rax]} (@hash [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand '_₂]} [#reg-rand 'rsp] {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rax]} [#var-rand '_₂] {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand '_₂] [#reg-rand 'rsp]})] :spilled-variable-count 0 :used-callee-saved-registers []] [['movq [[#imm-rand 1] [#reg-rand 'rdx]]] ['addq [[#imm-rand 2] [#reg-rand 'rdx]]] ['movq [[#imm-rand 3] [#reg-rand 'rcx]]] ['addq [[#imm-rand 4] [#reg-rand 'rcx]]] ['movq [[#reg-rand 'rdx] [#reg-rand 'rax]]] ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-program [:contexts [:begin [:_₁ #int-t :_₂ #int-t]]] [:begin [#cons-block [] [['pushq [[#reg-rand 'rbp]]] ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]] ['subq [[#imm-rand 0] [#reg-rand 'rsp]]] [#jmp 'begin.body]]] :begin.body [#cons-block [:context [:_₁ #int-t :_₂ #int-t] :live-after-instrs [{[#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₂] [#var-rand '_₁] [#reg-rand 'rsp]} {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rsp]} {[#var-rand '_₂] [#reg-rand 'rax] [#reg-rand 'rsp]} {[#reg-rand 'rsp] [#reg-rand 'rax]} {} {}] :live-before-block {[#reg-rand 'rsp]} :interference-graph [#cons-graph {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand '_₂] [#reg-rand 'rax]} (@hash [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand '_₂]} [#reg-rand 'rsp] {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rax]} [#var-rand '_₂] {[#var-rand '_₁] [#reg-rand 'rsp] [#reg-rand 'rax]} [#reg-rand 'rax] {[#var-rand '_₂] [#reg-rand 'rsp]})] :spilled-variable-count 0 :used-callee-saved-registers []] [['movq [[#imm-rand 1] [#reg-rand 'rdx]]] ['addq [[#imm-rand 2] [#reg-rand 'rdx]]] ['movq [[#imm-rand 3] [#reg-rand 'rcx]]] ['addq [[#imm-rand 4] [#reg-rand 'rcx]]] ['movq [[#reg-rand 'rdx] [#reg-rand 'rax]]] ['addq [[#reg-rand 'rcx] [#reg-rand 'rax]]] [#jmp 'begin.epilog]]] :begin.epilog [#cons-block [] [['addq [[#imm-rand 0] [#reg-rand 'rsp]]] ['popq [[#reg-rand 'rbp]]] #retq]]]]

