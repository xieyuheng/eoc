mod:

  (mod () (let ((x (iadd (iadd 1 2) (iadd 3 4)))) (iadd x 5)))

shrink:

  (mod () (let ((x (iadd (iadd 1 2) (iadd 3 4)))) (iadd x 5)))

uniquify:

  (mod () (let ((x₁ (iadd (iadd 1 2) (iadd 3 4)))) (iadd x₁ 5)))

check-type:

  (mod () (the int-t (let ((x₁ (the int-t (iadd (the int-t (iadd (the int-t 1) (the int-t 2))) (the int-t (iadd (the int-t 3) (the int-t 4))))))) (the int-t (iadd (the int-t x₁) (the int-t 5))))))

remove-complex-operands:

  (mod () (the int-t (let ((x₁ (the int-t (let ((_₁ (the int-t (iadd (the int-t 1) (the int-t 2))))) (the int-t (let ((_₂ (the int-t (iadd (the int-t 3) (the int-t 4))))) (the int-t (iadd (the int-t _₁) (the int-t _₂))))))))) (the int-t (iadd (the int-t x₁) (the int-t 5))))))

explicate-control:

  [#cons-c-mod
   []
   [:begin
    [#cons-seq
     [#assign-stmt
      [#var-c-exp '_₁]
      #int-type
      [#prim-c-exp 'iadd [[#int-c-exp 1] [#int-c-exp 2]]]]
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₂]
       #int-type
       [#prim-c-exp 'iadd [[#int-c-exp 3] [#int-c-exp 4]]]]
      [#cons-seq
       [#assign-stmt
        [#var-c-exp 'x₁]
        #int-type
        [#prim-c-exp 'iadd [[#var-c-exp '_₁] [#var-c-exp '_₂]]]]
       [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'x₁] [#int-c-exp 5]]]]]]]]]

uncover-locals:

  [#cons-c-mod
   [:locals [:_₁ #int-type :_₂ #int-type :x₁ #int-type]]
   [:begin
    [#cons-seq
     [#assign-stmt
      [#var-c-exp '_₁]
      #int-type
      [#prim-c-exp 'iadd [[#int-c-exp 1] [#int-c-exp 2]]]]
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₂]
       #int-type
       [#prim-c-exp 'iadd [[#int-c-exp 3] [#int-c-exp 4]]]]
      [#cons-seq
       [#assign-stmt
        [#var-c-exp 'x₁]
        #int-type
        [#prim-c-exp 'iadd [[#var-c-exp '_₁] [#var-c-exp '_₂]]]]
       [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'x₁] [#int-c-exp 5]]]]]]]]]

select-instructions:

  [#cons-x86-mod
   [:locals [:_₁ #int-type :_₂ #int-type :x₁ #int-type]]
   [:begin
    [#cons-block
     []
     [['movq [[#imm-rand 1] [#var-rand '_₁]]]
      ['addq [[#imm-rand 2] [#var-rand '_₁]]]
      ['movq [[#imm-rand 3] [#var-rand '_₂]]]
      ['addq [[#imm-rand 4] [#var-rand '_₂]]]
      ['movq [[#var-rand '_₁] [#var-rand 'x₁]]]
      ['addq [[#var-rand '_₂] [#var-rand 'x₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#imm-rand 5] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-mod
   [:locals [:_₁ #int-type :_₂ #int-type :x₁ #int-type]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₂] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rsp]}
       {[#var-rand '_₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#var-rand '_₁]]]
      ['addq [[#imm-rand 2] [#var-rand '_₁]]]
      ['movq [[#imm-rand 3] [#var-rand '_₂]]]
      ['addq [[#imm-rand 4] [#var-rand '_₂]]]
      ['movq [[#var-rand '_₁] [#var-rand 'x₁]]]
      ['addq [[#var-rand '_₂] [#var-rand 'x₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#imm-rand 5] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-mod
   [:locals [:_₁ #int-type :_₂ #int-type :x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand '_₁]
      [#var-rand '_₂]
      [#var-rand 'x₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand '_₂]}
       [#var-rand '_₂] {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand 'x₁]}
       [#var-rand 'x₁] {[#var-rand '_₂] [#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand '_₁] [#var-rand '_₂] [#var-rand 'x₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₂] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rsp]}
       {[#var-rand '_₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#var-rand '_₁]]]
      ['addq [[#imm-rand 2] [#var-rand '_₁]]]
      ['movq [[#imm-rand 3] [#var-rand '_₂]]]
      ['addq [[#imm-rand 4] [#var-rand '_₂]]]
      ['movq [[#var-rand '_₁] [#var-rand 'x₁]]]
      ['addq [[#var-rand '_₂] [#var-rand 'x₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#imm-rand 5] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-mod
   [:home-locations
    (@hash
      [#var-rand '_₂] [#reg-rand 'rcx]
      [#var-rand '_₁] [#reg-rand 'rbx]
      [#var-rand 'x₁] [#reg-rand 'rbx])
    :spill-count 0
    :callee-saved [[#reg-rand 'rbx]]
    :locals [:_₁ #int-type :_₂ #int-type :x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand '_₁]
      [#var-rand '_₂]
      [#var-rand 'x₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand '_₂]}
       [#var-rand '_₂] {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand 'x₁]}
       [#var-rand 'x₁] {[#var-rand '_₂] [#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand '_₁] [#var-rand '_₂] [#var-rand 'x₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₂] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rsp]}
       {[#var-rand '_₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#var-rand '_₁]]]
      ['addq [[#imm-rand 2] [#var-rand '_₁]]]
      ['movq [[#imm-rand 3] [#var-rand '_₂]]]
      ['addq [[#imm-rand 4] [#var-rand '_₂]]]
      ['movq [[#var-rand '_₁] [#var-rand 'x₁]]]
      ['addq [[#var-rand '_₂] [#var-rand 'x₁]]]
      ['movq [[#var-rand 'x₁] [#reg-rand 'rax]]]
      ['addq [[#imm-rand 5] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

assign-homes:

  [#cons-x86-mod
   [:home-locations
    (@hash
      [#var-rand '_₂] [#reg-rand 'rcx]
      [#var-rand '_₁] [#reg-rand 'rbx]
      [#var-rand 'x₁] [#reg-rand 'rbx])
    :spill-count 0
    :callee-saved [[#reg-rand 'rbx]]
    :locals [:_₁ #int-type :_₂ #int-type :x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand '_₁]
      [#var-rand '_₂]
      [#var-rand 'x₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand '_₂]}
       [#var-rand '_₂] {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand 'x₁]}
       [#var-rand 'x₁] {[#var-rand '_₂] [#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand '_₁] [#var-rand '_₂] [#var-rand 'x₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₂] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rsp]}
       {[#var-rand '_₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#reg-rand 'rbx]]]
      ['addq [[#imm-rand 2] [#reg-rand 'rbx]]]
      ['movq [[#imm-rand 3] [#reg-rand 'rcx]]]
      ['addq [[#imm-rand 4] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rbx]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rbx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rax]]]
      ['addq [[#imm-rand 5] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-mod
   [:home-locations
    (@hash
      [#var-rand '_₂] [#reg-rand 'rcx]
      [#var-rand '_₁] [#reg-rand 'rbx]
      [#var-rand 'x₁] [#reg-rand 'rbx])
    :spill-count 0
    :callee-saved [[#reg-rand 'rbx]]
    :locals [:_₁ #int-type :_₂ #int-type :x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand '_₁]
      [#var-rand '_₂]
      [#var-rand 'x₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand '_₂]}
       [#var-rand '_₂] {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand 'x₁]}
       [#var-rand 'x₁] {[#var-rand '_₂] [#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand '_₁] [#var-rand '_₂] [#var-rand 'x₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₂] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rsp]}
       {[#var-rand '_₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#reg-rand 'rbx]]]
      ['addq [[#imm-rand 2] [#reg-rand 'rbx]]]
      ['movq [[#imm-rand 3] [#reg-rand 'rcx]]]
      ['addq [[#imm-rand 4] [#reg-rand 'rcx]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rbx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rax]]]
      ['addq [[#imm-rand 5] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-mod
   [:home-locations
    (@hash
      [#var-rand '_₂] [#reg-rand 'rcx]
      [#var-rand '_₁] [#reg-rand 'rbx]
      [#var-rand 'x₁] [#reg-rand 'rbx])
    :spill-count 0
    :callee-saved [[#reg-rand 'rbx]]
    :locals [:_₁ #int-type :_₂ #int-type :x₁ #int-type]
    :interference-graph
    [#cons-graph
     {[#var-rand '_₁]
      [#var-rand '_₂]
      [#var-rand 'x₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand '_₁] {[#reg-rand 'rsp] [#var-rand '_₂]}
       [#var-rand '_₂] {[#var-rand '_₁] [#reg-rand 'rsp] [#var-rand 'x₁]}
       [#var-rand 'x₁] {[#var-rand '_₂] [#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand '_₁] [#var-rand '_₂] [#var-rand 'x₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     []
     [['pushq [[#reg-rand 'rbp]]]
      ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]]
      ['pushq [[#reg-rand 'rbx]]]
      ['subq [[#imm-rand 8] [#reg-rand 'rsp]]]
      [#jmp 'begin.body]]]
    :begin.body
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₂] [#var-rand '_₁] [#reg-rand 'rsp]}
       {[#var-rand '_₁] [#var-rand '_₂] [#reg-rand 'rsp]}
       {[#var-rand '_₂] [#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 1] [#reg-rand 'rbx]]]
      ['addq [[#imm-rand 2] [#reg-rand 'rbx]]]
      ['movq [[#imm-rand 3] [#reg-rand 'rcx]]]
      ['addq [[#imm-rand 4] [#reg-rand 'rcx]]]
      ['addq [[#reg-rand 'rcx] [#reg-rand 'rbx]]]
      ['movq [[#reg-rand 'rbx] [#reg-rand 'rax]]]
      ['addq [[#imm-rand 5] [#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]
    :begin.epilog
    [#cons-block
     []
     [['addq [[#imm-rand 8] [#reg-rand 'rsp]]]
      ['popq [[#reg-rand 'rbx]]]
      ['popq [[#reg-rand 'rbp]]]
      #retq]]]]

