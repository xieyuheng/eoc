000 (program () (let ((x (iadd (iadd 1 2) (iadd 3 4)))) (iadd x 5)))
010 (program () (let ((x₁ (iadd (iadd 1 2) (iadd 3 4)))) (iadd x₁ 5)))
020 (program () (let ((x₁ (let ((_₂ (iadd 3 4))) (let ((_₁ (iadd 1 2))) (iadd _₁ _₂))))) (iadd x₁ 5)))
030 (c-program (:ctx (:_₂ int-t :_₁ int-t :x₁ int-t)) (:start ((= _₂ (iadd 3 4)) (= _₁ (iadd 1 2)) (= x₁ (iadd _₁ _₂)) (return (iadd x₁ 5)))))
040 (cons-x86-program [:ctx [:_₂ int-t :_₁ int-t :x₁ int-t]] [:start (cons-block [] [['movq [(imm-rand 3) (var-rand '_₂)]] ['addq [(imm-rand 4) (var-rand '_₂)]] ['movq [(imm-rand 1) (var-rand '_₁)]] ['addq [(imm-rand 2) (var-rand '_₁)]] ['movq [(var-rand '_₁) (var-rand 'x₁)]] ['addq [(var-rand '_₂) (var-rand 'x₁)]] ['movq [(var-rand 'x₁) (reg-rand 'rax)]] ['addq [(imm-rand 5) (reg-rand 'rax)]] (jmp 'epilog)])])
050 (cons-x86-program [:ctx [:_₂ int-t :_₁ int-t :x₁ int-t]] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 3) (var-rand '_₂)]] ['addq [(imm-rand 4) (var-rand '_₂)]] ['movq [(imm-rand 1) (var-rand '_₁)]] ['addq [(imm-rand 2) (var-rand '_₁)]] ['movq [(var-rand '_₁) (var-rand 'x₁)]] ['addq [(var-rand '_₂) (var-rand 'x₁)]] ['movq [(var-rand 'x₁) (reg-rand 'rax)]] ['addq [(imm-rand 5) (reg-rand 'rax)]] (jmp 'epilog)])])
060 (cons-x86-program [:ctx [:_₂ int-t :_₁ int-t :x₁ int-t] :stack-space 24] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 3) (deref-rand 'rbp -8)]] ['addq [(imm-rand 4) (deref-rand 'rbp -8)]] ['movq [(imm-rand 1) (deref-rand 'rbp -16)]] ['addq [(imm-rand 2) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -16) (deref-rand 'rbp -24)]] ['addq [(deref-rand 'rbp -8) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -24) (reg-rand 'rax)]] ['addq [(imm-rand 5) (reg-rand 'rax)]] (jmp 'epilog)])])
070 (cons-x86-program [:ctx [:_₂ int-t :_₁ int-t :x₁ int-t] :stack-space 24] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 3) (deref-rand 'rbp -8)]] ['addq [(imm-rand 4) (deref-rand 'rbp -8)]] ['movq [(imm-rand 1) (deref-rand 'rbp -16)]] ['addq [(imm-rand 2) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] ['movq [(reg-rand 'rax) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -8) (reg-rand 'rax)]] ['addq [(reg-rand 'rax) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -24) (reg-rand 'rax)]] ['addq [(imm-rand 5) (reg-rand 'rax)]] (jmp 'epilog)])])
080 (cons-x86-program [:ctx [:_₂ int-t :_₁ int-t :x₁ int-t] :stack-space 24] [:start (cons-block [:live-after-instrs [{}] :live-before-block {}] [['movq [(imm-rand 3) (deref-rand 'rbp -8)]] ['addq [(imm-rand 4) (deref-rand 'rbp -8)]] ['movq [(imm-rand 1) (deref-rand 'rbp -16)]] ['addq [(imm-rand 2) (deref-rand 'rbp -16)]] ['movq [(deref-rand 'rbp -16) (reg-rand 'rax)]] ['movq [(reg-rand 'rax) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -8) (reg-rand 'rax)]] ['addq [(reg-rand 'rax) (deref-rand 'rbp -24)]] ['movq [(deref-rand 'rbp -24) (reg-rand 'rax)]] ['addq [(imm-rand 5) (reg-rand 'rax)]] (jmp 'epilog)]) :begin (cons-block [] [['pushq [(reg-rand 'rbp)]] ['movq [(reg-rand 'rsp) (reg-rand 'rbp)]] ['subq [(imm-rand 16) (reg-rand 'rsp)]] (jmp 'start)]) :epilog (cons-block [] [['addq [(imm-rand 16) (reg-rand 'rsp)]] ['popq [(reg-rand 'rbp)]] retq])])
