program:

  (program () (let ((z (let ((y (let ((x (ineg 42))) x))) y))) (ineg z)))

shrink:

  (program () (let ((z (let ((y (let ((x (ineg 42))) x))) y))) (ineg z)))

uniquify:

  (program () (let ((z₁ (let ((y₁ (let ((x₁ (ineg 42))) x₁))) y₁))) (ineg z₁)))

remove-complex-operands:

  (program () (let ((z₁ (let ((y₁ (let ((x₁ (ineg 42))) x₁))) y₁))) (ineg z₁)))

explicate-control:

  [#cons-c-program
   []
   [:begin
    [#cons-seq
     [#assign-stmt [#var-c-exp 'x₁] [#prim-c-exp 'ineg [[#int-c-exp 42]]]]
     [#cons-seq
      [#assign-stmt [#var-c-exp 'y₁] [#var-c-exp 'x₁]]
      [#cons-seq
       [#assign-stmt [#var-c-exp 'z₁] [#var-c-exp 'y₁]]
       [#return-seq [#prim-c-exp 'ineg [[#var-c-exp 'z₁]]]]]]]]]

select-instructions:

  [#cons-x86-program
   [:context [:x₁ #int-t :y₁ #int-t :z₁ #int-t]]
   [:begin
    [#cons-block
     []
     [['movq [[#imm-rand 42] [#var-rand 'x₁]]]
      ['negq [[#var-rand 'x₁]]]
      ['movq [[#var-rand 'x₁] [#var-rand 'y₁]]]
      ['movq [[#var-rand 'y₁] [#var-rand 'z₁]]]
      ['movq [[#var-rand 'z₁] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

uncover-live:

  [#cons-x86-program
   [:context [:x₁ #int-t :y₁ #int-t :z₁ #int-t]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#var-rand 'z₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 42] [#var-rand 'x₁]]]
      ['negq [[#var-rand 'x₁]]]
      ['movq [[#var-rand 'x₁] [#var-rand 'y₁]]]
      ['movq [[#var-rand 'y₁] [#var-rand 'z₁]]]
      ['movq [[#var-rand 'z₁] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

build-interference:

  [#cons-x86-program
   [:context [:x₁ #int-t :y₁ #int-t :z₁ #int-t]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'y₁]
      [#var-rand 'z₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp]}
       [#var-rand 'y₁] {[#reg-rand 'rsp]}
       [#var-rand 'z₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁] [#var-rand 'y₁] [#var-rand 'z₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#var-rand 'z₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 42] [#var-rand 'x₁]]]
      ['negq [[#var-rand 'x₁]]]
      ['movq [[#var-rand 'x₁] [#var-rand 'y₁]]]
      ['movq [[#var-rand 'y₁] [#var-rand 'z₁]]]
      ['movq [[#var-rand 'z₁] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

allocate-registers:

  [#cons-x86-program
   [:home-locations
    (@hash
      [#var-rand 'x₁] [#reg-rand 'rcx]
      [#var-rand 'y₁] [#reg-rand 'rcx]
      [#var-rand 'z₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :context [:x₁ #int-t :y₁ #int-t :z₁ #int-t]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'y₁]
      [#var-rand 'z₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp]}
       [#var-rand 'y₁] {[#reg-rand 'rsp]}
       [#var-rand 'z₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁] [#var-rand 'y₁] [#var-rand 'z₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#var-rand 'z₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 42] [#var-rand 'x₁]]]
      ['negq [[#var-rand 'x₁]]]
      ['movq [[#var-rand 'x₁] [#var-rand 'y₁]]]
      ['movq [[#var-rand 'y₁] [#var-rand 'z₁]]]
      ['movq [[#var-rand 'z₁] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

assign-homes:

  [#cons-x86-program
   [:home-locations
    (@hash
      [#var-rand 'x₁] [#reg-rand 'rcx]
      [#var-rand 'y₁] [#reg-rand 'rcx]
      [#var-rand 'z₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :context [:x₁ #int-t :y₁ #int-t :z₁ #int-t]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'y₁]
      [#var-rand 'z₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp]}
       [#var-rand 'y₁] {[#reg-rand 'rsp]}
       [#var-rand 'z₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁] [#var-rand 'y₁] [#var-rand 'z₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#var-rand 'z₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 42] [#reg-rand 'rcx]]]
      ['negq [[#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

patch-instructions:

  [#cons-x86-program
   [:home-locations
    (@hash
      [#var-rand 'x₁] [#reg-rand 'rcx]
      [#var-rand 'y₁] [#reg-rand 'rcx]
      [#var-rand 'z₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :context [:x₁ #int-t :y₁ #int-t :z₁ #int-t]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'y₁]
      [#var-rand 'z₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp]}
       [#var-rand 'y₁] {[#reg-rand 'rsp]}
       [#var-rand 'z₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁] [#var-rand 'y₁] [#var-rand 'z₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#var-rand 'z₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 42] [#reg-rand 'rcx]]]
      ['negq [[#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]]]

prolog-and-epilog:

  [#cons-x86-program
   [:home-locations
    (@hash
      [#var-rand 'x₁] [#reg-rand 'rcx]
      [#var-rand 'y₁] [#reg-rand 'rcx]
      [#var-rand 'z₁] [#reg-rand 'rcx])
    :spill-count 0
    :callee-saved []
    :context [:x₁ #int-t :y₁ #int-t :z₁ #int-t]
    :interference-graph
    [#cons-graph
     {[#var-rand 'x₁]
      [#var-rand 'y₁]
      [#var-rand 'z₁]
      [#reg-rand 'rsp]
      [#reg-rand 'rax]}
     (@hash
       [#var-rand 'x₁] {[#reg-rand 'rsp]}
       [#var-rand 'y₁] {[#reg-rand 'rsp]}
       [#var-rand 'z₁] {[#reg-rand 'rsp]}
       [#reg-rand 'rsp]
       {[#var-rand 'x₁] [#var-rand 'y₁] [#var-rand 'z₁] [#reg-rand 'rax]}
       [#reg-rand 'rax] {[#reg-rand 'rsp]})]]
   [:begin
    [#cons-block
     []
     [['pushq [[#reg-rand 'rbp]]]
      ['movq [[#reg-rand 'rsp] [#reg-rand 'rbp]]]
      [#jmp 'begin.body]]]
    :begin.body
    [#cons-block
     [:block-live-before-set {[#reg-rand 'rsp]}
      :live-after-sets
      [{[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'x₁] [#reg-rand 'rsp]}
       {[#var-rand 'y₁] [#reg-rand 'rsp]}
       {[#var-rand 'z₁] [#reg-rand 'rsp]}
       {[#reg-rand 'rax] [#reg-rand 'rsp]}
       {[#reg-rand 'rsp] [#reg-rand 'rax]}
       {}]]
     [['movq [[#imm-rand 42] [#reg-rand 'rcx]]]
      ['negq [[#reg-rand 'rcx]]]
      ['movq [[#reg-rand 'rcx] [#reg-rand 'rax]]]
      ['negq [[#reg-rand 'rax]]]
      [#jmp 'begin.epilog]]]
    :begin.epilog [#cons-block [] [['popq [[#reg-rand 'rbp]]] #retq]]]]

