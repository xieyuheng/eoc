>> (program () 8)
=> (program () 8)
>> (program () (ineg 8))
=> (program () -8)
>> (program () (let ((x 8)) (iadd x x)))
=> (program () 16)
>> (program () x)
=> (program () x)
>> (program () (iadd x x))
=> (program () (iadd x x))
>> (program () (iadd (ineg 8) x))
=> (program () (iadd -8 x))
>> (program () (iadd (iadd 8 8) (ineg x)))
=> (program () (iadd 16 (ineg x)))
>> (program () (let ((x (random-dice))) (let ((y (random-dice))) (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10)))))
=> (program () (if (if (lt? (random-dice) 1) (eq? (random-dice) 0) (eq? (random-dice) 2)) (iadd 2 (random-dice)) (iadd 10 (random-dice))))
