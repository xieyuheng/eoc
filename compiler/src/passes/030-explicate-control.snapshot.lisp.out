>> (program () (iadd x 1))
=> 
   [#cons-c-program
    []
    [:begin [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'x] [#int-c-exp 1]]]]]]
>> (program () (iadd (iadd x 1) 1))
=> 
   [#cons-c-program
    []
    [:begin
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₁]
       [#prim-c-exp 'iadd [[#var-c-exp 'x] [#int-c-exp 1]]]]
      [#return-seq [#prim-c-exp 'iadd [[#var-c-exp '_₁] [#int-c-exp 1]]]]]]]
>> (program () (let ((y (iadd x 1))) (iadd y 1)))
=> 
   [#cons-c-program
    []
    [:begin
     [#cons-seq
      [#assign-stmt
       [#var-c-exp 'y₁]
       [#prim-c-exp 'iadd [[#var-c-exp 'x] [#int-c-exp 1]]]]
      [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 1]]]]]]]
>> (program () (let ((y (iadd (iadd x 1) 1))) (iadd y 1)))
=> 
   [#cons-c-program
    []
    [:begin
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₁]
       [#prim-c-exp 'iadd [[#var-c-exp 'x] [#int-c-exp 1]]]]
      [#cons-seq
       [#assign-stmt
        [#var-c-exp 'y₁]
        [#prim-c-exp 'iadd [[#var-c-exp '_₁] [#int-c-exp 1]]]]
       [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 1]]]]]]]]
>> (program () (let ((x 8)) (if (and e1 e2) (iadd x x) (imul x x))))
=> 
   [#cons-c-program
    []
    [:begin.then₀
     [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'x₁] [#var-c-exp 'x₁]]]]
     :begin.else₁
     [#return-seq [#prim-c-exp 'imul [[#var-c-exp 'x₁] [#var-c-exp 'x₁]]]]
     :begin.then₂ [#goto-seq 'begin.then₀]
     :begin.else₃ [#goto-seq 'begin.else₁]
     :begin.then₄
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'e2] [#bool-c-exp #t]]]
      'begin.then₂
      'begin.else₃]
     :begin
     [#cons-seq
      [#assign-stmt [#var-c-exp 'x₁] [#int-c-exp 8]]
      [#branch-seq
       [#prim-c-exp 'eq? [[#var-c-exp 'e1] [#bool-c-exp #t]]]
       'begin.then₄
       'begin.else₃]]]]
>> (program () (let ((x (random-dice))) (let ((y (random-dice))) (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10)))))
=> 
   [#cons-c-program
    []
    [:begin.then₀
     [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 2]]]]
     :begin.else₁
     [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 10]]]]
     :begin.then₂ [#goto-seq 'begin.then₀]
     :begin.else₃ [#goto-seq 'begin.else₁]
     :begin.then₄
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'x₁] [#int-c-exp 0]]]
      'begin.then₂
      'begin.else₃]
     :begin.else₅
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'x₁] [#int-c-exp 2]]]
      'begin.then₂
      'begin.else₃]
     :begin
     [#cons-seq
      [#assign-stmt [#var-c-exp 'x₁] [#prim-c-exp 'random-dice []]]
      [#cons-seq
       [#assign-stmt [#var-c-exp 'y₁] [#prim-c-exp 'random-dice []]]
       [#branch-seq
        [#prim-c-exp 'lt? [[#var-c-exp 'x₁] [#int-c-exp 1]]]
        'begin.then₄
        'begin.else₅]]]]]
>> (program () (let ((x (random-dice))) (let ((y (random-dice))) (iadd (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10)) (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10))))))
=> 
   [#cons-c-program
    []
    [:begin.let-body₀
     [#return-seq [#prim-c-exp 'iadd [[#var-c-exp '_₁] [#var-c-exp '_₂]]]]
     :begin.then₁
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₂]
       [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 2]]]]
      [#goto-seq 'begin.let-body₀]]
     :begin.else₂
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₂]
       [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 10]]]]
      [#goto-seq 'begin.let-body₀]]
     :begin.then₃ [#goto-seq 'begin.then₁]
     :begin.else₄ [#goto-seq 'begin.else₂]
     :begin.then₅
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'x₁] [#int-c-exp 0]]]
      'begin.then₃
      'begin.else₄]
     :begin.else₆
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'x₁] [#int-c-exp 2]]]
      'begin.then₃
      'begin.else₄]
     :begin.let-body₇
     [#branch-seq
      [#prim-c-exp 'lt? [[#var-c-exp 'x₁] [#int-c-exp 1]]]
      'begin.then₅
      'begin.else₆]
     :begin.then₈
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₁]
       [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 2]]]]
      [#goto-seq 'begin.let-body₇]]
     :begin.else₉
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₁]
       [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 10]]]]
      [#goto-seq 'begin.let-body₇]]
     :begin.then₁₀ [#goto-seq 'begin.then₈]
     :begin.else₁₁ [#goto-seq 'begin.else₉]
     :begin.then₁₂
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'x₁] [#int-c-exp 0]]]
      'begin.then₁₀
      'begin.else₁₁]
     :begin.else₁₃
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'x₁] [#int-c-exp 2]]]
      'begin.then₁₀
      'begin.else₁₁]
     :begin
     [#cons-seq
      [#assign-stmt [#var-c-exp 'x₁] [#prim-c-exp 'random-dice []]]
      [#cons-seq
       [#assign-stmt [#var-c-exp 'y₁] [#prim-c-exp 'random-dice []]]
       [#branch-seq
        [#prim-c-exp 'lt? [[#var-c-exp 'x₁] [#int-c-exp 1]]]
        'begin.then₁₂
        'begin.else₁₃]]]]]
>> (program () (if (and (eq? (random-dice) 1) (eq? (random-dice) 2)) 0 42))
=> 
   [#cons-c-program
    []
    [:begin.then₀ [#return-seq [#int-c-exp 0]]
     :begin.else₁ [#return-seq [#int-c-exp 42]]
     :begin.then₂ [#goto-seq 'begin.then₀]
     :begin.else₃ [#goto-seq 'begin.else₁]
     :begin.then₄
     [#cons-seq
      [#assign-stmt [#var-c-exp '_₂] [#prim-c-exp 'random-dice []]]
      [#branch-seq
       [#prim-c-exp 'eq? [[#var-c-exp '_₂] [#int-c-exp 2]]]
       'begin.then₂
       'begin.else₃]]
     :begin
     [#cons-seq
      [#assign-stmt [#var-c-exp '_₁] [#prim-c-exp 'random-dice []]]
      [#branch-seq
       [#prim-c-exp 'eq? [[#var-c-exp '_₁] [#int-c-exp 1]]]
       'begin.then₄
       'begin.else₃]]]]
