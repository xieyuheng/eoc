>> (mod () (iadd 1 1))
=> [#cons-c-mod
    []
    [:begin [#return-seq [#prim-c-exp 'iadd [[#int-c-exp 1] [#int-c-exp 1]]]]]]
>> (mod () (iadd (iadd 1 1) 1))
=> [#cons-c-mod
    []
    [:begin
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₁]
       #int-type
       [#prim-c-exp 'iadd [[#int-c-exp 1] [#int-c-exp 1]]]]
      [#return-seq [#prim-c-exp 'iadd [[#var-c-exp '_₁] [#int-c-exp 1]]]]]]]
>> (mod () (let ((y (iadd 1 1))) (iadd y 1)))
=> [#cons-c-mod
    []
    [:begin
     [#cons-seq
      [#assign-stmt
       [#var-c-exp 'y₁]
       #int-type
       [#prim-c-exp 'iadd [[#int-c-exp 1] [#int-c-exp 1]]]]
      [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 1]]]]]]]
>> (mod () (let ((y (iadd (iadd 1 1) 1))) (iadd y 1)))
=> [#cons-c-mod
    []
    [:begin
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₁]
       #int-type
       [#prim-c-exp 'iadd [[#int-c-exp 1] [#int-c-exp 1]]]]
      [#cons-seq
       [#assign-stmt
        [#var-c-exp 'y₁]
        #int-type
        [#prim-c-exp 'iadd [[#var-c-exp '_₁] [#int-c-exp 1]]]]
       [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 1]]]]]]]]
>> (mod () (let ((x 8)) (if (and #t #f) (iadd x x) (imul x x))))
=> [#cons-c-mod
    []
    [:begin.then.0
     [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'x₁] [#var-c-exp 'x₁]]]]
     :begin.else.1
     [#return-seq [#prim-c-exp 'imul [[#var-c-exp 'x₁] [#var-c-exp 'x₁]]]]
     :begin
     [#cons-seq
      [#assign-stmt [#var-c-exp 'x₁] #int-type [#int-c-exp 8]]
      [#goto-seq 'begin.else.1]]]]
>> (mod () (let ((x (random-dice))) (let ((y (random-dice))) (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10)))))
=> [#cons-c-mod
    []
    [:begin.then.0
     [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 2]]]]
     :begin.else.1
     [#return-seq [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 10]]]]
     :begin.then.2 [#goto-seq 'begin.then.0]
     :begin.else.3 [#goto-seq 'begin.else.1]
     :begin.then.4
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'x₁] [#int-c-exp 0]]]
      'begin.then.2
      'begin.else.3]
     :begin.else.5
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'x₁] [#int-c-exp 2]]]
      'begin.then.2
      'begin.else.3]
     :begin
     [#cons-seq
      [#assign-stmt [#var-c-exp 'x₁] #int-type [#prim-c-exp 'random-dice []]]
      [#cons-seq
       [#assign-stmt [#var-c-exp 'y₁] #int-type [#prim-c-exp 'random-dice []]]
       [#branch-seq
        [#prim-c-exp 'lt? [[#var-c-exp 'x₁] [#int-c-exp 1]]]
        'begin.then.4
        'begin.else.5]]]]]
>> (mod () (let ((x (random-dice))) (let ((y (random-dice))) (iadd (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10)) (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10))))))
=> [#cons-c-mod
    []
    [:begin.let_body.0
     [#return-seq [#prim-c-exp 'iadd [[#var-c-exp '_₁] [#var-c-exp '_₂]]]]
     :begin.then.1
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₂]
       #int-type
       [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 2]]]]
      [#goto-seq 'begin.let_body.0]]
     :begin.else.2
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₂]
       #int-type
       [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 10]]]]
      [#goto-seq 'begin.let_body.0]]
     :begin.then.3 [#goto-seq 'begin.then.1]
     :begin.else.4 [#goto-seq 'begin.else.2]
     :begin.then.5
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'x₁] [#int-c-exp 0]]]
      'begin.then.3
      'begin.else.4]
     :begin.else.6
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'x₁] [#int-c-exp 2]]]
      'begin.then.3
      'begin.else.4]
     :begin.let_body.7
     [#branch-seq
      [#prim-c-exp 'lt? [[#var-c-exp 'x₁] [#int-c-exp 1]]]
      'begin.then.5
      'begin.else.6]
     :begin.then.8
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₁]
       #int-type
       [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 2]]]]
      [#goto-seq 'begin.let_body.7]]
     :begin.else.9
     [#cons-seq
      [#assign-stmt
       [#var-c-exp '_₁]
       #int-type
       [#prim-c-exp 'iadd [[#var-c-exp 'y₁] [#int-c-exp 10]]]]
      [#goto-seq 'begin.let_body.7]]
     :begin.then.10 [#goto-seq 'begin.then.8]
     :begin.else.11 [#goto-seq 'begin.else.9]
     :begin.then.12
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'x₁] [#int-c-exp 0]]]
      'begin.then.10
      'begin.else.11]
     :begin.else.13
     [#branch-seq
      [#prim-c-exp 'eq? [[#var-c-exp 'x₁] [#int-c-exp 2]]]
      'begin.then.10
      'begin.else.11]
     :begin
     [#cons-seq
      [#assign-stmt [#var-c-exp 'x₁] #int-type [#prim-c-exp 'random-dice []]]
      [#cons-seq
       [#assign-stmt [#var-c-exp 'y₁] #int-type [#prim-c-exp 'random-dice []]]
       [#branch-seq
        [#prim-c-exp 'lt? [[#var-c-exp 'x₁] [#int-c-exp 1]]]
        'begin.then.12
        'begin.else.13]]]]]
>> (mod () (if (and (eq? (random-dice) 1) (eq? (random-dice) 2)) 0 42))
=> [#cons-c-mod
    []
    [:begin.then.0 [#return-seq [#int-c-exp 0]]
     :begin.else.1 [#return-seq [#int-c-exp 42]]
     :begin.then.2 [#goto-seq 'begin.then.0]
     :begin.else.3 [#goto-seq 'begin.else.1]
     :begin.then.4
     [#cons-seq
      [#assign-stmt [#var-c-exp '_₂] #int-type [#prim-c-exp 'random-dice []]]
      [#branch-seq
       [#prim-c-exp 'eq? [[#var-c-exp '_₂] [#int-c-exp 2]]]
       'begin.then.2
       'begin.else.3]]
     :begin
     [#cons-seq
      [#assign-stmt [#var-c-exp '_₁] #int-type [#prim-c-exp 'random-dice []]]
      [#branch-seq
       [#prim-c-exp 'eq? [[#var-c-exp '_₁] [#int-c-exp 1]]]
       'begin.then.4
       'begin.else.3]]]]
