>> (mod () (iadd x 1))
=> (mod () (iadd x 1))
>> (mod () (iadd (iadd x 1) 1))
=> (mod () (let ((_₁ (iadd x 1))) (iadd _₁ 1)))
>> (mod () (let ((y (iadd x 1))) (iadd y 1)))
=> (mod () (let ((y (iadd x 1))) (iadd y 1)))
>> (mod () (let ((y (iadd (iadd x 1) 1))) (iadd y 1)))
=> (mod () (let ((y (let ((_₁ (iadd x 1))) (iadd _₁ 1)))) (iadd y 1)))
>> (mod () (let ((x 8)) (if (and e1 e2) (iadd x x) (imul x x))))
=> (mod () (let ((x 8)) (if (and e1 e2) (iadd x x) (imul x x))))
>> (mod () (let ((x (random-dice))) (let ((y (random-dice))) (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10)))))
=> (mod () (let ((x (random-dice))) (let ((y (random-dice))) (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10)))))
>> (mod () (let ((x (random-dice))) (let ((y (random-dice))) (iadd (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10)) (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10))))))
=> (mod () (let ((x (random-dice))) (let ((y (random-dice))) (let ((_₁ (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10)))) (let ((_₂ (if (if (lt? x 1) (eq? x 0) (eq? x 2)) (iadd y 2) (iadd y 10)))) (iadd _₁ _₂))))))
